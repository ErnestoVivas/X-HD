within VCLib.Media.Refrigerants.R290_new;
package R290_new_IIR_P05_30_T263_343_Horner
  "Refrigerant model for R290 using a hybrid approach with explicit Horner formulas developed by Sangi et al."
  constant Modelica.Media.Interfaces.PartialTwoPhaseMedium.FluidConstants[1]
    refrigerantConstants(
     each chemicalFormula = "C3H8",
     each structureFormula = "C3H8",
     each casRegistryNumber = "74-98-6",
     each iupacName = "Propane",
     each molarMass = 0.04409562,
     each criticalTemperature = 369.89,
     each criticalPressure = 4.2512e6,
     each criticalMolarVolume = 1/(5e3),
     each normalBoilingPoint = 231.036,
     each triplePointTemperature = 85.525,
     each meltingPoint = 85.45,
     each acentricFactor = 0.153,
     each triplePointPressure = 0.00017,
     each dipoleMoment = 0.1,
     each hasCriticalData=true) "Thermodynamic constants for Propane";

  extends
    VCLib.Media.Refrigerants.Interfaces.PartialHybridTwoPhaseMediumFormula(
    mediumName="Propane",
    substanceNames={"Propane"},
    singleState=false,
    SpecificEnthalpy(
      start=2.056719230221021e05,
      nominal=2.057e5,
      min=105.1241e3,
      max=991.8072e3),
    Density(
      start=300,
      nominal=529,
      min=1.1249,
      max=586.0756),
    AbsolutePressure(
      start=4.744575428061412e5,
      nominal=5e5,
      min=1e5,
      max=70e5),
    Temperature(
      start=273.15,
      nominal=333.15,
      min=233.15,
      max=473.15),
    smoothModel=true,
    onePhase=false,
    ThermoStates=Choices.IndependentVariables.phX,
    fluidConstants=refrigerantConstants);

  redeclare record SmoothTransition
    "Record that contains ranges to calculate a smooth transition between
    different regions"
      SpecificEnthalpy T_ph = 2.5;
      SpecificEntropy T_ps = 2.5;
      AbsolutePressure d_pT = 2.5;
      SpecificEnthalpy d_ph = 2.5;
      Real d_ps(unit="J/(Pa.K.kg)") =  25/(30e5-0.5e5);
      Real h_ps(unit="J/(Pa.K.kg)") = 50/(30e5-0.5e5);
  end SmoothTransition;

  redeclare function extends f_Idg
    "Dimensionless Helmholtz energy (Ideal gas contribution alpha_0)"
  algorithm
    f_Idg := log(delta) + (3) * log(tau) + (-4.970583) +
      (4.29352) * tau + (3.043) * log(1-exp(-(1.062478)*tau)) + (5.874) *
      log(1-exp(-(3.344237)*tau)) + (9.337) * log(1-exp(-(5.363757)*tau)) +
      (7.922) * log(1-exp(-(11.762957)*tau));
  end f_Idg;

  redeclare function extends f_Res
    "Dimensionless Helmholtz energy (Residual part alpha_r)"
  algorithm
    f_Res := (0.042910051) * delta^(4) * tau^(1) + (1.7313671) * delta^(1) *
      tau^(0.33) + (-2.4516524) * delta^(1) * tau^(0.8) + (0.34157466) *
      delta^(2) * tau^(0.43) + (-0.46047898) * delta^(2) * tau^(0.9) +
      (-0.66847295) * delta^(1) * tau^(2.46) * exp(-delta^(1)) + (0.20889705)
      * delta^(3) * tau^(2.09) * exp(-delta^(1)) + (0.19421381) * delta^(6) *
      tau^(0.88) * exp(-delta^(1)) + (-0.22917851) * delta^(6) * tau^(1.09) *
      exp(-delta^(1)) + (-0.60405866) * delta^(2) * tau^(3.25) *
      exp(-delta^(2)) + (0.066680654) * delta^(3) * tau^(4.62) *
      exp(-delta^(2)) + (0.017534618) * delta^(1) * tau^(0.76) *
      exp(-(0.963) * (delta - (1.283))^2 - (2.33) * (tau - (0.684))^2) +
      (0.33874242) * delta^(1) * tau^(2.5) * exp(-(1.977) * (delta -
      (0.6936))^2 - (3.47) * (tau - (0.829))^2) + (0.22228777) * delta^(1) *
      tau^(2.75) * exp(-(1.917) * (delta - (0.788))^2 - (3.15) * (tau -
      (1.419))^2) + (-0.23219062) * delta^(2) * tau^(3.05) * exp(-(2.307) *
      (delta - (0.473))^2 - (3.19) * (tau - (0.817))^2) + (-0.09220694) *
      delta^(2) * tau^(2.55) * exp(-(2.546) * (delta - (0.8577))^2 - (0.92) *
      (tau - (1.5))^2) + (-0.47575718) * delta^(4) * tau^(8.4) * exp(-(3.28) *
      (delta - (0.271))^2 - (18.8) * (tau - (1.426))^2) + (-0.017486824) *
      delta^(1) * tau^(6.75) * exp(-(14.6) * (delta - (0.948))^2 - (547.8) *
      (tau - (1.093))^2);
  end f_Res;

  redeclare function extends t_fIdg_t
    "Short form for tau*(dalpha_0/dtau)_delta=const"
  algorithm
    t_fIdg_t := (3) + (4.29352)* tau +
    tau*(3.043)*(1.062478)/(exp((1.062478)*tau)-1) + tau*(5.874)*
    (3.344237)/(exp((3.344237)*tau)-1) + tau*(9.337)*(5.363757)/
    (exp((5.363757)*tau)-1) + tau*(7.922)*(11.762957)/(exp((11.762957)*
    tau)-1);
  end t_fIdg_t;

  redeclare function extends tt_fIdg_tt
    "Short form for tau*tau*(ddalpha_0/(dtau*dtau))_delta=const"
  algorithm
    tt_fIdg_tt := -(3)
    - tau^2*(3.043)*(1.062478)^2*exp((1.062478)*tau)/(exp((1.062478)*tau)-1)^2
    - tau^2*(5.874)*(3.344237)^2*exp((3.344237)*tau)/(exp((3.344237)*tau)-1)^2
    - tau^2*(9.337)*(5.363757)^2*exp((5.363757)*tau)/(exp((5.363757)*tau)-1)^2
    - tau^2*(7.922)*(11.762957)^2*exp((11.762957)*tau)/(exp((11.762957)*tau)-1)^2;
  end tt_fIdg_tt;

  redeclare function extends t_fRes_t
    "Short form for tau*(dalpha_r/dtau)_delta=const"
  algorithm
    t_fRes_t := (0.042910051)*(1)*delta^(4)*tau^(1) + (1.7313671)*
      (0.33)*delta^(1)*tau^(0.33) + (-2.4516524)*(0.8)*delta^(1)*tau^(0.8) +
      (0.34157466)*(0.43)*delta^(2)*tau^(0.43) + (-0.46047898)*(0.9)*
      delta^(2)*tau^(0.9) + (-0.66847295)*(2.46)*delta^(1)*tau^(2.46)*
      exp(-delta^(1)) + (0.20889705)*(2.09)*delta^(3)*tau^(2.09)*
      exp(-delta^(1)) + (0.19421381)*(0.88)*delta^(6)*tau^(0.88)*
      exp(-delta^(1)) + (-0.22917851)*(1.09)*delta^(6)*tau^(1.09)*
      exp(-delta^(1)) + (-0.60405866)*(3.25)*delta^(2)*tau^(3.25)*
      exp(-delta^(2)) + (0.066680654)*(4.62)*delta^(3)*tau^(4.62)*
      exp(-delta^(2)) + (0.017534618)*delta^(1)*tau^(0.76)*exp(-(0.963)*
      (delta-(1.283))^2 - (2.33)*(tau-(0.684))^2)*((0.76) - 2*(2.33)*tau*
      (tau-(0.684))) + (0.33874242)*delta^(1)*tau^(2.5)*exp(-(1.977)*
      (delta-(0.6936))^2 - (3.47)*(tau-(0.829))^2)*((2.5) - 2*(3.47)*tau*
      (tau-(0.829))) + (0.22228777)*delta^(1)*tau^(2.75)*exp(-(1.917)*
      (delta-(0.788))^2 - (3.15)*(tau-(1.419))^2)*((2.75) - 2*(3.15)*tau*
      (tau-(1.419))) + (-0.23219062)*delta^(2)*tau^(3.05)*exp(-(2.307)*
      (delta-(0.473))^2 - (3.19)*(tau-(0.817))^2)*((3.05) - 2*(3.19)*tau*
      (tau-(0.817))) + (-0.09220694)*delta^(2)*tau^(2.55)*exp(-(2.546)*
      (delta-(0.8577))^2 - (0.92)*(tau-(1.5))^2)*((2.55) - 2*(0.92)*tau*
      (tau-(1.5))) + (-0.47575718)*delta^(4)*tau^(8.4)*exp(-(3.28)*
      (delta-(0.271))^2 - (18.8)*(tau-(1.426))^2)*((8.4) - 2*(18.8)*tau*
      (tau-(1.426))) + (-0.017486824)*delta^(1)*tau^(6.75)*exp(-(14.6)*
      (delta-(0.948))^2 - (547.8)*(tau-(1.093))^2)*((6.75) - 2*(547.8)*
      tau*(tau-(1.093)));
  end t_fRes_t;

  redeclare function extends tt_fRes_tt
    "Short form for tau*tau*(ddalpha_r/(dtau*dtau))_delta=const"
  algorithm
    tt_fRes_tt := (0.042910051)*(1)*((1)-1)*delta^(4)*tau^(1) +
      (1.7313671)*(0.33)*((0.33)-1)*delta^(1)*tau^(0.33) + (-2.4516524)*
      (0.8)*((0.8)-1)*delta^(1)*tau^(0.8) + (0.34157466)*(0.43)*((0.43)-1)*
      delta^(2)*tau^(0.43) + (-0.46047898)*(0.9)*((0.9)-1)*delta^(2)*
      tau^(0.9) + (-0.66847295)*(2.46)*((2.46)-1)*delta^(1)*tau^(2.46)*
      exp(-delta^(1)) + (0.20889705)*(2.09)*((2.09)-1)*delta^(3)*tau^(2.09)*
      exp(-delta^(1)) + (0.19421381)*(0.88)*((0.88)-1)*delta^(6)*tau^(0.88)*
      exp(-delta^(1)) + (-0.22917851)*(1.09)*((1.09)-1)*delta^(6)*tau^(1.09)*
      exp(-delta^(1)) + (-0.60405866)*(3.25)*((3.25)-1)*delta^(2)*tau^(3.25)*
      exp(-delta^(2)) + (0.066680654)*(4.62)*((4.62)-1)*delta^(3)*tau^(4.62)*
      exp(-delta^(2)) + (0.017534618)*delta^(1)*tau^(0.76)*exp(-(0.963)*
      (delta-(1.283))^2 - (2.33)*(tau-(0.684))^2)*(((0.76) - 2*(2.33)*tau*
      (tau-(0.684)))^2 -(0.76) - 2*(2.33)*tau^2) + (0.33874242)*delta^(1)*
      tau^(2.5)*exp(-(1.977)*(delta-(0.6936))^2 - (3.47)*(tau-(0.829))^2)*
      (((2.5) - 2*(3.47)*tau*(tau-(0.829)))^2 -(2.5) - 2*(3.47)*tau^2) +
      (0.22228777)*delta^(1)*tau^(2.75)*exp(-(1.917)*(delta-(0.788))^2 -
      (3.15)*(tau-(1.419))^2)*(((2.75) - 2*(3.15)*tau*(tau-(1.419)))^2 -
      (2.75) - 2*(3.15)*tau^2) + (-0.23219062)*delta^(2)*tau^(3.05)*
      exp(-(2.307)*(delta-(0.473))^2 - (3.19)*(tau-(0.817))^2)*(((3.05) - 2*
      (3.19)*tau*(tau-(0.817)))^2 -(3.05) - 2*(3.19)*tau^2) + (-0.09220694)*
      delta^(2)*tau^(2.55)*exp(-(2.546)*(delta-(0.8577))^2 - (0.92)*
      (tau-(1.5))^2)*(((2.55) - 2*(0.92)*tau*(tau-(1.5)))^2 -(2.55) - 2*
      (0.92)*tau^2) + (-0.47575718)*delta^(4)*tau^(8.4)*exp(-(3.28)*
      (delta-(0.271))^2 - (18.8)*(tau-(1.426))^2)*(((8.4) - 2*(18.8)*
      tau*(tau-(1.426)))^2 -(8.4) - 2*(18.8)*tau^2) + (-0.017486824)*
      delta^(1)*tau^(6.75)*exp(-(14.6)*(delta-(0.948))^2 - (547.8)*
      (tau-(1.093))^2)*(((6.75) - 2*(547.8)*tau*(tau-(1.093)))^2 -(6.75) - 2*
      (547.8)*tau^2);
  end tt_fRes_tt;

  redeclare function extends d_fRes_d
    "Short form for delta*(dalpha_r/(ddelta))_tau=const"
  algorithm
    d_fRes_d := (0.042910051)*(4)*delta^(4)*tau^(1) +
      (1.7313671)*(1)*delta^(1)*tau^(0.33) + (-2.4516524)*(1)*delta^(1)*
      tau^(0.8) + (0.34157466)*(2)*delta^(2)*tau^(0.43) + (-0.46047898)*
      (2)*delta^(2)*tau^(0.9) + (-0.66847295)*delta^(1)*tau^(2.46)*
      ((1)-(1)*delta^(1))*exp(-delta^(1)) + (0.20889705)*delta^(3)*
      tau^(2.09)*((3)-(1)*delta^(1))*exp(-delta^(1)) + (0.19421381)*
      delta^(6)*tau^(0.88)*((6)-(1)*delta^(1))*exp(-delta^(1)) +
      (-0.22917851)*delta^(6)*tau^(1.09)*((6)-(1)*delta^(1))*exp(-delta^(1))
      + (-0.60405866)*delta^(2)*tau^(3.25)*((2)-(2)*delta^(2))*
      exp(-delta^(2)) + (0.066680654)*delta^(3)*tau^(4.62)*((3)-(2)*
      delta^(2))*exp(-delta^(2)) + (0.017534618)*delta^(1)*tau^(0.76)*
      exp(-(0.963)*(delta-(1.283))^2 - (2.33)*(tau-(0.684))^2)*((1) - 2*
      (0.963)*delta*(delta-(1.283))) + (0.33874242)*delta^(1)*tau^(2.5)*
      exp(-(1.977)*(delta-(0.6936))^2 - (3.47)*(tau-(0.829))^2)*((1) - 2*
      (1.977)*delta*(delta-(0.6936))) + (0.22228777)*delta^(1)*tau^(2.75)*
      exp(-(1.917)*(delta-(0.788))^2 - (3.15)*(tau-(1.419))^2)*((1) - 2*
      (1.917)*delta*(delta-(0.788))) + (-0.23219062)*delta^(2)*tau^(3.05)*
      exp(-(2.307)*(delta-(0.473))^2 - (3.19)*(tau-(0.817))^2)*((2) - 2*
      (2.307)*delta*(delta-(0.473))) + (-0.09220694)*delta^(2)*tau^(2.55)*
      exp(-(2.546)*(delta-(0.8577))^2 - (0.92)*(tau-(1.5))^2)*((2) - 2*
      (2.546)*delta*(delta-(0.8577))) + (-0.47575718)*delta^(4)*tau^(8.4)*
      exp(-(3.28)*(delta-(0.271))^2 - (18.8)*(tau-(1.426))^2)*((4) - 2*
      (3.28)*delta*(delta-(0.271))) + (-0.017486824)*delta^(1)*tau^(6.75)*
      exp(-(14.6)*(delta-(0.948))^2 - (547.8)*(tau-(1.093))^2)*((1) - 2*
      (14.6)*delta*(delta-(0.948)));
  end d_fRes_d;

  redeclare function extends dd_fRes_dd
    "Short form for delta*delta(ddalpha_r/(ddelta*delta))_tau=const"
  algorithm
    dd_fRes_dd := (0.042910051)*(4)*((4)-1)*delta^(4)*
      tau^(1) + (1.7313671)*(1)*((1)-1)*delta^(1)*tau^(0.33) + (-2.4516524)*
      (1)*((1)-1)*delta^(1)*tau^(0.8) + (0.34157466)*(2)*((2)-1)*delta^(2)*
      tau^(0.43) + (-0.46047898)*(2)*((2)-1)*delta^(2)*tau^(0.9) +
      (-0.66847295)*delta^(1)*tau^(2.46)*(((1)-(1)*delta^(1))*((1)-1-(1)*
      delta^(1))-(1)^2*delta^(1))*exp(-delta^(1)) + (0.20889705)*delta^(3)*
      tau^(2.09)*(((3)-(1)*delta^(1))*((3)-1-(1)*delta^(1))-(1)^2*delta^(1))*
      exp(-delta^(1)) + (0.19421381)*delta^(6)*tau^(0.88)*(((6)-(1)*
      delta^(1))*((6)-1-(1)*delta^(1))-(1)^2*delta^(1))*exp(-delta^(1)) +
      (-0.22917851)*delta^(6)*tau^(1.09)*(((6)-(1)*delta^(1))*((6)-1-(1)*
      delta^(1))-(1)^2*delta^(1))*exp(-delta^(1)) + (-0.60405866)*delta^(2)*
      tau^(3.25)*(((2)-(2)*delta^(2))*((2)-1-(2)*delta^(2))-(2)^2*delta^(2))*
      exp(-delta^(2)) + (0.066680654)*delta^(3)*tau^(4.62)*(((3)-(2)*
      delta^(2))*((3)-1-(2)*delta^(2))-(2)^2*delta^(2))*exp(-delta^(2)) +
      (0.017534618)*delta^(1)*tau^(0.76)*exp(-(0.963)*(delta-(1.283))^2 -
      (2.33)*(tau-(0.684))^2)*(((1) - 2*(0.963)*delta*(delta-(1.283)))^2 -
      (1) - 2*(0.963)*delta^2) + (0.33874242)*delta^(1)*tau^(2.5)*
      exp(-(1.977)*(delta-(0.6936))^2 - (3.47)*(tau-(0.829))^2)*(((1) - 2*
      (1.977)*delta*(delta-(0.6936)))^2 - (1) - 2*(1.977)*delta^2) +
      (0.22228777)*delta^(1)*tau^(2.75)*exp(-(1.917)*(delta-(0.788))^2 -
      (3.15)*(tau-(1.419))^2)*(((1) - 2*(1.917)*delta*(delta-(0.788)))^2 -
      (1) - 2*(1.917)*delta^2) + (-0.23219062)*delta^(2)*tau^(3.05)*
      exp(-(2.307)*(delta-(0.473))^2 - (3.19)*(tau-(0.817))^2)*(((2) - 2*
      (2.307)*delta*(delta-(0.473)))^2 - (2) - 2*(2.307)*delta^2) +
      (-0.09220694)*delta^(2)*tau^(2.55)*exp(-(2.546)*(delta-(0.8577))^2 -
      (0.92)*(tau-(1.5))^2)*(((2) - 2*(2.546)*delta*(delta-(0.8577)))^2 -
      (2) - 2*(2.546)*delta^2) + (-0.47575718)*delta^(4)*tau^(8.4)*
      exp(-(3.28)*(delta-(0.271))^2 - (18.8)*(tau-(1.426))^2)*(((4) - 2*
      (3.28)*delta*(delta-(0.271)))^2 - (4) - 2*(3.28)*delta^2) +
      (-0.017486824)*delta^(1)*tau^(6.75)*exp(-(14.6)*(delta-(0.948))^2 -
      (547.8)*(tau-(1.093))^2)*(((1) - 2*(14.6)*delta*(delta-(0.948)))^2 -
      (1) - 2*(14.6)*delta^2);
  end dd_fRes_dd;

  redeclare function extends td_fRes_td
    "Short form for tau*delta*(ddalpha_r/(dtau*ddelta))"
  algorithm
    td_fRes_td := (0.042910051)*(4)*(1)*delta^(4)*
      tau^(1) + (1.7313671)*(1)*(0.33)*delta^(1)*tau^(0.33) + (-2.4516524)*
      (1)*(0.8)*delta^(1)*tau^(0.8) + (0.34157466)*(2)*(0.43)*delta^(2)*
      tau^(0.43) + (-0.46047898)*(2)*(0.9)*delta^(2)*tau^(0.9) +
      (-0.66847295)*(2.46)*delta^(1)*tau^(2.46)*((1)-(1)*delta^(1))*
      exp(-delta^(1)) + (0.20889705)*(2.09)*delta^(3)*tau^(2.09)*((3)-(1)*
      delta^(1))*exp(-delta^(1)) + (0.19421381)*(0.88)*delta^(6)*tau^(0.88)*
      ((6)-(1)*delta^(1))*exp(-delta^(1)) + (-0.22917851)*(1.09)*delta^(6)*
      tau^(1.09)*((6)-(1)*delta^(1))*exp(-delta^(1)) + (-0.60405866)*(3.25)*
      delta^(2)*tau^(3.25)*((2)-(2)*delta^(2))*exp(-delta^(2)) +
      (0.066680654)*(4.62)*delta^(3)*tau^(4.62)*((3)-(2)*delta^(2))*
      exp(-delta^(2)) + (0.017534618)*delta^(1)*tau^(0.76)*exp(-(0.963)*
      (delta-(1.283))^2 - (2.33)*(tau-(0.684))^2)*((0.76) - 2*(2.33)*tau*
      (tau-(0.684)))*((1) - 2*(0.963)*delta*(delta-(1.283))) + (0.33874242)*
      delta^(1)*tau^(2.5)*exp(-(1.977)*(delta-(0.6936))^2 - (3.47)*
      (tau-(0.829))^2)*((2.5) - 2*(3.47)*tau*(tau-(0.829)))*((1) - 2*(1.977)*
      delta*(delta-(0.6936))) + (0.22228777)*delta^(1)*tau^(2.75)*
      exp(-(1.917)*(delta-(0.788))^2 - (3.15)*(tau-(1.419))^2)*((2.75) - 2*
      (3.15)*tau*(tau-(1.419)))*((1) - 2*(1.917)*delta*(delta-(0.788))) +
      (-0.23219062)*delta^(2)*tau^(3.05)*exp(-(2.307)*(delta-(0.473))^2 -
      (3.19)*(tau-(0.817))^2)*((3.05) - 2*(3.19)*tau*(tau-(0.817)))*((2) -
      2*(2.307)*delta*(delta-(0.473))) + (-0.09220694)*delta^(2)*tau^(2.55)*
      exp(-(2.546)*(delta-(0.8577))^2 - (0.92)*(tau-(1.5))^2)*((2.55) - 2*
      (0.92)*tau*(tau-(1.5)))*((2) - 2*(2.546)*delta*(delta-(0.8577))) +
      (-0.47575718)*delta^(4)*tau^(8.4)*exp(-(3.28)*(delta-(0.271))^2 -
      (18.8)*(tau-(1.426))^2)*((8.4) - 2*(18.8)*tau*(tau-(1.426)))*((4) - 2*
      (3.28)*delta*(delta-(0.271))) + (-0.017486824)*delta^(1)*tau^(6.75)*
      exp(-(14.6)*(delta-(0.948))^2 - (547.8)*(tau-(1.093))^2)*((6.75) - 2*
      (547.8)*tau*(tau-(1.093)))*((1) - 2*(14.6)*delta*(delta-(0.948)));
  end td_fRes_td;

  redeclare function extends ttt_fIdg_ttt
    "Short form for tau*tau*tau*(dddalpha_0/(dtau*dtau*dtau))_delta=const"
  algorithm
    ttt_fIdg_ttt := 2*(3)*(1) + (-4.970583)*(0)*((0)-1)*((0)-2) *
      tau^(0) + (4.29352)*(1)*((1)-1)*((1)-2) *tau^(1) + tau^3*(3.043)*
      (1.062478)^3*exp((1.062478)*tau)*(exp((1.062478)*tau)+1)/
      (exp((1.062478)*tau)-1)^3 + tau^3*(5.874)*(3.344237)^3*exp((3.344237)*
      tau)*(exp((3.344237)*tau)+1)/(exp((3.344237)*tau)-1)^3 + tau^3*(9.337)*
      (5.363757)^3*exp((5.363757)*tau)*(exp((5.363757)*tau)+1)/
      (exp((5.363757)*tau)-1)^3 + tau^3*(7.922)*(11.762957)^3*exp((11.762957)*
      tau)*(exp((11.762957)*tau)+1)/(exp((11.762957)*tau)-1)^3;
  end ttt_fIdg_ttt;

  redeclare function extends ttt_fRes_ttt
    "Short form for tau*tau*tau*(dddalpha_r/(dtau*dtau*dtau))_delta=const"
  algorithm
    ttt_fRes_ttt := (0.042910051)*(1)*((1)-1)*((1)-2)*delta^(4)*
      tau^(1) + (1.7313671)*(0.33)*((0.33)-1)*((0.33)-2)*delta^(1)*
      tau^(0.33) + (-2.4516524)*(0.8)*((0.8)-1)*((0.8)-2)*delta^(1)*
      tau^(0.8) + (0.34157466)*(0.43)*((0.43)-1)*((0.43)-2)*delta^(2)*
      tau^(0.43) + (-0.46047898)*(0.9)*((0.9)-1)*((0.9)-2)*delta^(2)*
      tau^(0.9) + (-0.66847295)*(2.46)*((2.46)-1)*((2.46)-2)*delta^(1)*
      tau^(2.46)*exp(-delta^(1)) + (0.20889705)*(2.09)*((2.09)-1)*((2.09)-2)*
      delta^(3)*tau^(2.09)*exp(-delta^(1)) + (0.19421381)*(0.88)*((0.88)-1)*
      ((0.88)-2)*delta^(6)*tau^(0.88)*exp(-delta^(1)) + (-0.22917851)*
      (1.09)*((1.09)-1)*((1.09)-2)*delta^(6)*tau^(1.09)*exp(-delta^(1)) +
      (-0.60405866)*(3.25)*((3.25)-1)*((3.25)-2)*delta^(2)*tau^(3.25)*
      exp(-delta^(2)) + (0.066680654)*(4.62)*((4.62)-1)*((4.62)-2)*
      delta^(3)*tau^(4.62)*exp(-delta^(2)) - (0.017534618)*delta^(1)*
      tau^(0.76)*exp(-(0.963)*(delta-(1.283))^2 - (2.33)*(tau-(0.684))^2)*
      (8*(2.33)^3*tau^6-24*(2.33)^3*(0.684)*tau^5+12*(2.33)^2*(2*(2.33)*
      (0.684)^2-(0.76)-1)*tau^4-4*(2.33)^2*(0.684)*(2*(2.33)*(0.684)^2-6*
      (0.76)-3)*tau^3-6*(0.76)*(2.33)*(2*(2.33)*(0.684)^2-(0.76))*tau^2-6*
      ((0.76)-1)*(0.76)*(2.33)*(0.684)*tau-(0.76)^3+3*(0.76)^2-2*(0.76)) -
      (0.33874242)*delta^(1)*tau^(2.5)*exp(-(1.977)*(delta-(0.6936))^2 -
      (3.47)*(tau-(0.829))^2)*(8*(3.47)^3*tau^6-24*(3.47)^3*(0.829)*tau^5+
      12*(3.47)^2*(2*(3.47)*(0.829)^2-(2.5)-1)*tau^4-4*(3.47)^2*(0.829)*(2*
      (3.47)*(0.829)^2-6*(2.5)-3)*tau^3-6*(2.5)*(3.47)*(2*(3.47)*(0.829)^2-
      (2.5))*tau^2-6*((2.5)-1)*(2.5)*(3.47)*(0.829)*tau-(2.5)^3+3*(2.5)^2-2*
      (2.5)) - (0.22228777)*delta^(1)*tau^(2.75)*exp(-(1.917)*(delta-
      (0.788))^2 - (3.15)*(tau-(1.419))^2)*(8*(3.15)^3*tau^6-24*(3.15)^3*
      (1.419)*tau^5+12*(3.15)^2*(2*(3.15)*(1.419)^2-(2.75)-1)*tau^4-4*
      (3.15)^2*(1.419)*(2*(3.15)*(1.419)^2-6*(2.75)-3)*tau^3-6*(2.75)*
      (3.15)*(2*(3.15)*(1.419)^2-(2.75))*tau^2-6*((2.75)-1)*(2.75)*(3.15)*
      (1.419)*tau-(2.75)^3+3*(2.75)^2-2*(2.75)) - (-0.23219062)*delta^(2)*
      tau^(3.05)*exp(-(2.307)*(delta-(0.473))^2 - (3.19)*(tau-(0.817))^2)*
      (8*(3.19)^3*tau^6-24*(3.19)^3*(0.817)*tau^5+12*(3.19)^2*(2*(3.19)*
      (0.817)^2-(3.05)-1)*tau^4-4*(3.19)^2*(0.817)*(2*(3.19)*(0.817)^2-6*
      (3.05)-3)*tau^3-6*(3.05)*(3.19)*(2*(3.19)*(0.817)^2-(3.05))*tau^2-6*
      ((3.05)-1)*(3.05)*(3.19)*(0.817)*tau-(3.05)^3+3*(3.05)^2-2*(3.05)) -
      (-0.09220694)*delta^(2)*tau^(2.55)*exp(-(2.546)*(delta-(0.8577))^2 -
      (0.92)*(tau-(1.5))^2)*(8*(0.92)^3*tau^6-24*(0.92)^3*(1.5)*tau^5+12*
      (0.92)^2*(2*(0.92)*(1.5)^2-(2.55)-1)*tau^4-4*(0.92)^2*(1.5)*(2*(0.92)*
      (1.5)^2-6*(2.55)-3)*tau^3-6*(2.55)*(0.92)*(2*(0.92)*(1.5)^2-(2.55))*
      tau^2-6*((2.55)-1)*(2.55)*(0.92)*(1.5)*tau-(2.55)^3+3*(2.55)^2-2*
      (2.55)) - (-0.47575718)*delta^(4)*tau^(8.4)*exp(-(3.28)*(delta-
      (0.271))^2 - (18.8)*(tau-(1.426))^2)*(8*(18.8)^3*tau^6-24*(18.8)^3*
      (1.426)*tau^5+12*(18.8)^2*(2*(18.8)*(1.426)^2-(8.4)-1)*tau^4-4*
      (18.8)^2*(1.426)*(2*(18.8)*(1.426)^2-6*(8.4)-3)*tau^3-6*(8.4)*(18.8)*
      (2*(18.8)*(1.426)^2-(8.4))*tau^2-6*((8.4)-1)*(8.4)*(18.8)*(1.426)*
      tau-(8.4)^3+3*(8.4)^2-2*(8.4)) - (-0.017486824)*delta^(1)*tau^(6.75)*
      exp(-(14.6)*(delta-(0.948))^2 - (547.8)*(tau-(1.093))^2)*(8*(547.8)^3*
      tau^6-24*(547.8)^3*(1.093)*tau^5+12*(547.8)^2*(2*(547.8)*(1.093)^2-
      (6.75)-1)*tau^4-4*(547.8)^2*(1.093)*(2*(547.8)*(1.093)^2-6*(6.75)-3)*
      tau^3-6*(6.75)*(547.8)*(2*(547.8)*(1.093)^2-(6.75))*tau^2-6*((6.75)-1)*
      (6.75)*(547.8)*(1.093)*tau-(6.75)^3+3*(6.75)^2-2*(6.75));
  end ttt_fRes_ttt;

  redeclare function extends ddd_fRes_ddd
    "Short form for delta*delta*delta*
    (dddalpha_r/(ddelta*ddelta*ddelta))_tau=const"
  algorithm
    ddd_fRes_ddd := (0.042910051)*(4)*((4)-1)*((4)-2)*
      delta^(4)*tau^(1) + (1.7313671)*(1)*((1)-1)*((1)-2)*delta^(1)*
      tau^(0.33) + (-2.4516524)*(1)*((1)-1)*((1)-2)*delta^(1)*tau^(0.8) +
      (0.34157466)*(2)*((2)-1)*((2)-2)*delta^(2)*tau^(0.43) + (-0.46047898)*
      (2)*((2)-1)*((2)-2)*delta^(2)*tau^(0.9) - (-0.66847295)*delta^(1)*
      tau^(2.46)*exp(-delta^(1))*((1)*delta^(1)*((1)*(delta^(1)*((1)*
      (delta^(1)-3)-3*(1)+3)+(1)+3*(1)-3)+3*(1)^2-6*(1)+2)-((1)-2)*((1)-1)*
      (1)) - (0.20889705)*delta^(3)*tau^(2.09)*exp(-delta^(1))*((1)*
      delta^(1)*((1)*(delta^(1)*((1)*(delta^(1)-3)-3*(3)+3)+(1)+3*(3)-3)+3*
      (3)^2-6*(3)+2)-((3)-2)*((3)-1)*(3)) - (0.19421381)*delta^(6)*
      tau^(0.88)*exp(-delta^(1))*((1)*delta^(1)*((1)*(delta^(1)*((1)*
      (delta^(1)-3)-3*(6)+3)+(1)+3*(6)-3)+3*(6)^2-6*(6)+2)-((6)-2)*((6)-1)*
      (6)) - (-0.22917851)*delta^(6)*tau^(1.09)*exp(-delta^(1))*((1)*
      delta^(1)*((1)*(delta^(1)*((1)*(delta^(1)-3)-3*(6)+3)+(1)+3*(6)-3)+3*
      (6)^2-6*(6)+2)-((6)-2)*((6)-1)*(6)) - (-0.60405866)*delta^(2)*
      tau^(3.25)*exp(-delta^(2))*((2)*delta^(2)*((2)*(delta^(2)*((2)*
      (delta^(2)-3)-3*(2)+3)+(2)+3*(2)-3)+3*(2)^2-6*(2)+2)-((2)-2)*((2)-1)*
      (2)) - (0.066680654)*delta^(3)*tau^(4.62)*exp(-delta^(2))*((2)*
      delta^(2)*((2)*(delta^(2)*((2)*(delta^(2)-3)-3*(3)+3)+(2)+3*(3)-3)+3*
      (3)^2-6*(3)+2)-((3)-2)*((3)-1)*(3)) - (0.017534618)*delta^(1)*
      tau^(0.76)*exp(-(0.963)*(delta-(1.283))^2 - (2.33)*(tau-(0.684))^2)*
      (8*(0.963)^3*delta^6-24*(0.963)^3*(1.283)*delta^5+12*(0.963)^2*(2*
      (0.963)*(1.283)^2-(1)-1)*delta^4-4*(0.963)^2*(1.283)*(2*(0.963)*
      (1.283)^2-6*(1)-3)*delta^3-6*(1)*(0.963)*(2*(0.963)*(1.283)^2-(1))*
      delta^2-6*((1)-1)*(1)*(0.963)*(1.283)*delta-(1)^3+3*(1)^2-2*(1)) -
      (0.33874242)*delta^(1)*tau^(2.5)*exp(-(1.977)*(delta-(0.6936))^2 -
      (3.47)*(tau-(0.829))^2)*(8*(1.977)^3*delta^6-24*(1.977)^3*(0.6936)*
      delta^5+12*(1.977)^2*(2*(1.977)*(0.6936)^2-(1)-1)*delta^4-4*(1.977)^2*
      (0.6936)*(2*(1.977)*(0.6936)^2-6*(1)-3)*delta^3-6*(1)*(1.977)*(2*
      (1.977)*(0.6936)^2-(1))*delta^2-6*((1)-1)*(1)*(1.977)*(0.6936)*delta-
      (1)^3+3*(1)^2-2*(1)) - (0.22228777)*delta^(1)*tau^(2.75)*exp(-(1.917)*
      (delta-(0.788))^2 - (3.15)*(tau-(1.419))^2)*(8*(1.917)^3*delta^6-24*
      (1.917)^3*(0.788)*delta^5+12*(1.917)^2*(2*(1.917)*(0.788)^2-(1)-1)*
      delta^4-4*(1.917)^2*(0.788)*(2*(1.917)*(0.788)^2-6*(1)-3)*delta^3-6*
      (1)*(1.917)*(2*(1.917)*(0.788)^2-(1))*delta^2-6*((1)-1)*(1)*(1.917)*
      (0.788)*delta-(1)^3+3*(1)^2-2*(1)) - (-0.23219062)*delta^(2)*tau^(3.05)*
      exp(-(2.307)*(delta-(0.473))^2 - (3.19)*(tau-(0.817))^2)*(8*(2.307)^3*
      delta^6-24*(2.307)^3*(0.473)*delta^5+12*(2.307)^2*(2*(2.307)*(0.473)^2-
      (2)-1)*delta^4-4*(2.307)^2*(0.473)*(2*(2.307)*(0.473)^2-6*(2)-3)*
      delta^3-6*(2)*(2.307)*(2*(2.307)*(0.473)^2-(2))*delta^2-6*((2)-1)*
      (2)*(2.307)*(0.473)*delta-(2)^3+3*(2)^2-2*(2)) - (-0.09220694)*
      delta^(2)*tau^(2.55)*exp(-(2.546)*(delta-(0.8577))^2 - (0.92)*
      (tau-(1.5))^2)*(8*(2.546)^3*delta^6-24*(2.546)^3*(0.8577)*delta^5+12*
      (2.546)^2*(2*(2.546)*(0.8577)^2-(2)-1)*delta^4-4*(2.546)^2*(0.8577)*(2*
      (2.546)*(0.8577)^2-6*(2)-3)*delta^3-6*(2)*(2.546)*(2*(2.546)*
      (0.8577)^2-(2))*delta^2-6*((2)-1)*(2)*(2.546)*(0.8577)*delta-(2)^3+3*
      (2)^2-2*(2)) - (-0.47575718)*delta^(4)*tau^(8.4)*exp(-(3.28)*
      (delta-(0.271))^2 - (18.8)*(tau-(1.426))^2)*(8*(3.28)^3*delta^6-24*
      (3.28)^3*(0.271)*delta^5+12*(3.28)^2*(2*(3.28)*(0.271)^2-(4)-1)*
      delta^4-4*(3.28)^2*(0.271)*(2*(3.28)*(0.271)^2-6*(4)-3)*delta^3-6*(4)*
      (3.28)*(2*(3.28)*(0.271)^2-(4))*delta^2-6*((4)-1)*(4)*(3.28)*(0.271)*
      delta-(4)^3+3*(4)^2-2*(4)) - (-0.017486824)*delta^(1)*tau^(6.75)*
      exp(-(14.6)*(delta-(0.948))^2 - (547.8)*(tau-(1.093))^2)*(8*(14.6)^3*
      delta^6-24*(14.6)^3*(0.948)*delta^5+12*(14.6)^2*(2*(14.6)*
      (0.948)^2-(1)-1)*delta^4-4*(14.6)^2*(0.948)*(2*(14.6)*(0.948)^2-6*
      (1)-3)*delta^3-6*(1)*(14.6)*(2*(14.6)*(0.948)^2-(1))*delta^2-6*
      ((1)-1)*(1)*(14.6)*(0.948)*delta-(1)^3+3*(1)^2-2*(1));
  end ddd_fRes_ddd;

  redeclare function extends tdd_fRes_tdd
    "Short form for tau*delta*delta*(dddalpha_r/(dtau*ddelta*ddelta))"
  algorithm
    tdd_fRes_tdd := (0.042910051)*(4)*(1)*(4-1)*
      delta^(4)*tau^(1) + (1.7313671)*(1)*(0.33)*(1-1)*delta^(1)*tau^(0.33) +
      (-2.4516524)*(1)*(0.8)*(1-1)*delta^(1)*tau^(0.8) + (0.34157466)*(2)*
      (0.43)*(2-1)*delta^(2)*tau^(0.43) + (-0.46047898)*(2)*(0.9)*(2-1)*
      delta^(2)*tau^(0.9) + (-0.66847295)*(2.46)*delta^(1)*tau^(2.46)*
      exp(-delta^(1))*((1)*delta^(1)*((1)*(delta^(1)-1)-2*(1)+1)+(1)*
      ((1)-1)) + (0.20889705)*(2.09)*delta^(3)*tau^(2.09)*exp(-delta^(1))*
      ((1)*delta^(1)*((1)*(delta^(1)-1)-2*(3)+1)+(3)*((3)-1)) + (0.19421381)*
      (0.88)*delta^(6)*tau^(0.88)*exp(-delta^(1))*((1)*delta^(1)*((1)*
      (delta^(1)-1)-2*(6)+1)+(6)*((6)-1)) + (-0.22917851)*(1.09)*delta^(6)*
      tau^(1.09)*exp(-delta^(1))*((1)*delta^(1)*((1)*(delta^(1)-1)-2*(6)+1)+
      (6)*((6)-1)) + (-0.60405866)*(3.25)*delta^(2)*tau^(3.25)*exp(-delta^(2))
      *((2)*delta^(2)*((2)*(delta^(2)-1)-2*(2)+1)+(2)*((2)-1)) +
      (0.066680654)*(4.62)*delta^(3)*tau^(4.62)*exp(-delta^(2))*((2)*
      delta^(2)*((2)*(delta^(2)-1)-2*(3)+1)+(3)*((3)-1)) + (0.017534618)*
      delta^(1)*tau^(0.76)*exp(-(0.963)*(delta - (1.283))^2 - (2.33)*
      (tau - (0.684))^2)*((0.76)-2*(2.33)*tau*(tau-(0.684)))*(((1)-2*(0.963)*
      delta*(delta-(1.283)))^2-(1)-2*(0.963)*delta^2) + (0.33874242)*
      delta^(1)*tau^(2.5)*exp(-(1.977)*(delta - (0.6936))^2 - (3.47)*
      (tau - (0.829))^2)*((2.5)-2*(3.47)*tau*(tau-(0.829)))*(((1)-2*(1.977)*
      delta*(delta-(0.6936)))^2-(1)-2*(1.977)*delta^2) + (0.22228777)*
      delta^(1)*tau^(2.75)*exp(-(1.917)*(delta - (0.788))^2 - (3.15)*
      (tau - (1.419))^2)*((2.75)-2*(3.15)*tau*(tau-(1.419)))*(((1)-2*
      (1.917)*delta*(delta-(0.788)))^2-(1)-2*(1.917)*delta^2) + (-0.23219062)*
      delta^(2)*tau^(3.05)*exp(-(2.307)*(delta - (0.473))^2 - (3.19)*
      (tau - (0.817))^2)*((3.05)-2*(3.19)*tau*(tau-(0.817)))*(((2)-2*(2.307)*
      delta*(delta-(0.473)))^2-(2)-2*(2.307)*delta^2) + (-0.09220694)*
      delta^(2)*tau^(2.55)*exp(-(2.546)*(delta - (0.8577))^2 - (0.92)*
      (tau - (1.5))^2)*((2.55)-2*(0.92)*tau*(tau-(1.5)))*(((2)-2*(2.546)*
      delta*(delta-(0.8577)))^2-(2)-2*(2.546)*delta^2) + (-0.47575718)*
      delta^(4)*tau^(8.4)*exp(-(3.28)*(delta - (0.271))^2 - (18.8)*
      (tau - (1.426))^2)*((8.4)-2*(18.8)*tau*(tau-(1.426)))*(((4)-2*
      (3.28)*delta*(delta-(0.271)))^2-(4)-2*(3.28)*delta^2) + (-0.017486824)*
      delta^(1)*tau^(6.75)*exp(-(14.6)*(delta - (0.948))^2 - (547.8)*
      (tau - (1.093))^2)*((6.75)-2*(547.8)*tau*(tau-(1.093)))*(((1)-2*(14.6)*
      delta*(delta-(0.948)))^2-(1)-2*(14.6)*delta^2);
  end tdd_fRes_tdd;

  redeclare function extends ttd_fRes_ttd
    "Short form for tau*tau*delta*(dddalpha_r/(dtau*dtau*ddelta))"
  algorithm
    ttd_fRes_ttd := (0.042910051)*(4)*(1)*(1-1)*
      delta^(4)*tau^(1) + (1.7313671)*(1)*(0.33)*(0.33-1)*delta^(1)*
      tau^(0.33) + (-2.4516524)*(1)*(0.8)*(0.8-1)*delta^(1)*tau^(0.8) +
      (0.34157466)*(2)*(0.43)*(0.43-1)*delta^(2)*tau^(0.43) + (-0.46047898)*
      (2)*(0.9)*(0.9-1)*delta^(2)*tau^(0.9) + (-0.66847295)*(2.46)*((2.46)-1)*
      delta^(1)*tau^(2.46)*exp(-delta^(1))*((1)-(1)*delta^(1)) + (0.20889705)*
      (2.09)*((2.09)-1)*delta^(3)*tau^(2.09)*exp(-delta^(1))*((3)-(1)*
      delta^(1)) + (0.19421381)*(0.88)*((0.88)-1)*delta^(6)*tau^(0.88)*
      exp(-delta^(1))*((6)-(1)*delta^(1)) + (-0.22917851)*(1.09)*((1.09)-1)*
      delta^(6)*tau^(1.09)*exp(-delta^(1))*((6)-(1)*delta^(1)) + (-0.60405866)*
      (3.25)*((3.25)-1)*delta^(2)*tau^(3.25)*exp(-delta^(2))*((2)-(2)*
      delta^(2)) + (0.066680654)*(4.62)*((4.62)-1)*delta^(3)*tau^(4.62)*
      exp(-delta^(2))*((3)-(2)*delta^(2)) + (0.017534618)*delta^(1)*
      tau^(0.76)*exp(-(0.963)*(delta - (1.283))^2 - (2.33)*(tau - (0.684))^2)*
      ((1)-2*(0.963)*delta*(delta-(1.283)))*(((0.76)-2*(2.33)*tau*
      (tau-(0.684)))^2-(0.76)-2*(2.33)*tau^2) + (0.33874242)*delta^(1)*
      tau^(2.5)*exp(-(1.977)*(delta - (0.6936))^2 - (3.47)*(tau - (0.829))^2)*
      ((1)-2*(1.977)*delta*(delta-(0.6936)))*(((2.5)-2*(3.47)*tau*
      (tau-(0.829)))^2-(2.5)-2*(3.47)*tau^2) + (0.22228777)*delta^(1)*
      tau^(2.75)*exp(-(1.917)*(delta - (0.788))^2 - (3.15)*(tau - (1.419))^2)*
      ((1)-2*(1.917)*delta*(delta-(0.788)))*(((2.75)-2*(3.15)*tau*
      (tau-(1.419)))^2-(2.75)-2*(3.15)*tau^2) + (-0.23219062)*delta^(2)*
      tau^(3.05)*exp(-(2.307)*(delta - (0.473))^2 - (3.19)*(tau - (0.817))^2)*
      ((2)-2*(2.307)*delta*(delta-(0.473)))*(((3.05)-2*(3.19)*tau*
      (tau-(0.817)))^2-(3.05)-2*(3.19)*tau^2) + (-0.09220694)*delta^(2)*
      tau^(2.55)*exp(-(2.546)*(delta - (0.8577))^2 - (0.92)*(tau - (1.5))^2)*
      ((2)-2*(2.546)*delta*(delta-(0.8577)))*(((2.55)-2*(0.92)*tau*
      (tau-(1.5)))^2-(2.55)-2*(0.92)*tau^2) + (-0.47575718)*delta^(4)*
      tau^(8.4)*exp(-(3.28)*(delta - (0.271))^2 - (18.8)*(tau - (1.426))^2)*
      ((4)-2*(3.28)*delta*(delta-(0.271)))*(((8.4)-2*(18.8)*tau*
      (tau-(1.426)))^2-(8.4)-2*(18.8)*tau^2) + (-0.017486824)*delta^(1)*
      tau^(6.75)*exp(-(14.6)*(delta - (0.948))^2 - (547.8)*
      (tau - (1.093))^2)*((1)-2*(14.6)*delta*(delta-(0.948)))*
      (((6.75)-2*(547.8)*tau*(tau-(1.093)))^2-(6.75)-2*(547.8)*tau^2);
  end ttd_fRes_ttd;

  redeclare function extends saturationPressure
    "Saturation pressure of refrigerant (Ancillary equation)"
    //Real OM = (1 - T/369.89); //Tcrit
  protected
    Real x = (T/369.89); //Tcrit

  algorithm
    if T>369.89 then
      p := 4251200;          //pcrit
    elseif T <= 85.525 then   //T_triple
      p := 0.00017;          //p_triple
    else
      p := 4251200 * (exp((1./x) .*
      ((75.321408974284).*(1-x).^(1.07222407534831) +
      (-81.0519041152623).*(1-x).^(1.06307154066207) +
      (18.0065546009563).*(1-x).^(19.7455632850335) +
      (7295.15298167272).*(1-x).^(25.730692124317) +
      (-2.15339222957172).*(1-x).^(3.44187720093662))));

    end if;
    annotation(smoothOrder = 2,
          Inline=false,
          LateInline=true);
  end saturationPressure;

  redeclare function extends saturationTemperature
    "Saturation temperature of refrigerant (Ancillary equation)"
  protected
    Real x;

  algorithm
    if p >= 4251200 then          //pcrit
      T := 369.89;                //Tcrit
    elseif p <= 0.00017 then      //ptripple
      T := 85.525;                //Ttripple
    else
    x :=(p - (1.410067058285438e+06)) ./ (1.172328606200022e+06);

      T := (3.015000000000000e+02) + (39.505189532515864) *
      (x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*
      ((-0.00747423192762247) + (0.000562033868963072)*x)+ (0.0393888618833131))+
      (-0.095281709871434))+ (0.0556376331286283))+ (0.224992751087163))+(-0.445539845883485))
   +(-0.00033297886958425))+ (0.707911493631686))+(-0.445107795656954))+ (-0.450473884781917))+
      (0.473143725939544))+ (0.147372009698933))+(-0.261455679287493))+ (0.0428751451664073))+
      (-0.0279888056297166))+ (0.13130284978973))+(-0.28335991167756))+ (0.918803545641917))
   +(0.327142413594078));
    end if;

    annotation(smoothOrder = 2,
          Inline=false,
          LateInline=true);
  end saturationTemperature;

  redeclare function extends bubbleDensity
    "Boiling curve specific density of refrigerant (Ancillary equation)"
  protected
    Real x;

  algorithm
    x := (sat.Tsat / 369.89);

    if x >= 1 then      //test
      x := 0.999999999;
    end if;

    dl := (4.732866734679028e+02) * (exp((1./x) *
    ((-2.4141175234946)*(1-x)^(0.0647872522169903) +
    (98.0943087223411)*(1-x)^(22.4464132212873) +
    (-30.7401353296442)*(1-x)^(0.422364028929688) +
    (12.8111416646539)*(1-x)^(1.59683055514672) +
    (-135.372211203363)*(1-x)^(0.879812950541257) +
    (144.502549302183)*(1-x)^(1.13280361348085) +
    (-87.6858673330732)*(1-x)^(1.30792820514138) +
    (0.222816539163513)*(1-x)^(0.722791646756699) +
    (85.0495081542842)*(1-x)^(0.688662245919351) +
    (13.663221963785)*(1-x)^(0.26901625105299))));

    annotation(smoothOrder = 2,
          Inline=false,
          LateInline=true);
  end bubbleDensity;

  redeclare function extends dewDensity
    "Dew curve specific density of refrigerant (Ancillary equation)"
  protected
    Real x;

  algorithm
    x := (sat.Tsat / 369.89);

    if x >= 1 then      //test
      x := 0.999999999;
    end if;

    dv := 36.834536985497040 * (exp((1./x) *
    ((4.09277849987875)*(1-x)^(0.0307453621606038) +
    (-5.34540379169152)*(1-x)^(0.721577501314099) +
    (-3.11402125177567)*(1-x)^(0.0901724939490538) +
    (-4.49698122153491)*(1-x)^(5.52327033468354) +
    (3.29585012442182)*(1-x)^(20.0377174105058) +
    (-1.60547616316828)*(1-x)^(2.31532372381305))));

    annotation(smoothOrder = 2,
          Inline=false,
          LateInline=true);
  end dewDensity;

  redeclare function extends bubbleEnthalpy
    "Boiling curve specific enthalpy of refrigerant (Ancillary equation)"
  protected
    Real x;

  algorithm
     x := (sat.psat - (1.410067058285438e+06))/(1.172328606200022e+06);

      hl := (2.848977010741006e+05)+ (1.149782809574040e+05) *
      (x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*
      ((-0.0656754927704503) + (0.00577519241668382)*x)+(0.271772294176198))+
      (-0.368892129682255))+ (-0.598842167369754))+ (2.27869311801934))+ (-0.875313076800453))+
      (-4.18239153620611))+ (4.15237512964778))+ (3.44031270765053))+ (-5.46669695641973))+
      (-1.23458847824892))+ (3.53497666293665))+ (0.0405468862433035))+ (-1.11370788409593))+
      (-0.00754268848532815))+ (0.274185673213617))+ (-0.207637164901995))+ (0.911504751253448)) +
   (0.225687523701771))
    annotation(smoothOrder = 2,
          Inline=false,
          LateInline=true);
  end bubbleEnthalpy;

  redeclare function extends dewEnthalpy
    "Dew curve specific enthalpy of refrigerant (Ancillary equation)"
  protected
    Real x;

  algorithm
    x := (sat.psat / (4251200));

    hv := (5.939313662559496e+05)* (exp((1./x) *
    ((-0.0336449609674175)*(1-x)^(-0.0795666320792369) +
    (0.0056115824747805)*(1-x)^(17.0146622792592) +
    (0.0409419917988476)*(1-x)^(4.26906321758232) +
    (-117.783552002934)*(1-x)^(0.706048027914744) +
    (117.769506355265)*(1-x)^(0.704661013906373))));

    annotation(smoothOrder = 2,
          Inline=false,
          LateInline=true);
  end dewEnthalpy;

  redeclare function extends bubbleEntropy
    "Boiling curve specific entropy of refrigerant (Ancillary equation)"
  protected
    Real x;

  algorithm
    x := (sat.psat - (1.410067058285438e+06))/(1.172328606200022e+06);

      sl := (1.261843878065207e+03)+ (3.695949660216577e+02)*
      (x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*(x*
      ((-0.0923341920029435)+ (0.00913105223621009)*x)+ (0.325255970626678))+
      (-0.298797990084873))+ (-0.844203671420036))+ (1.93053234257814))+ (0.240405572217674))+
      (-3.42877937968545))+ (1.20323374623306))+ (2.92349375511721))+ (-1.40182390290131))+
      (-1.42614875177814))+ (0.653779051177121))+ (0.284655764511113))+ (0.0446149630892932))+
      (-0.292691990114568))+ (0.889497230428513))+(0.295710341497624));

    annotation(smoothOrder = 2,
          Inline=false,
          LateInline=true);
  end bubbleEntropy;

  redeclare function extends dewEntropy
    "Dew curve specific entropy of propane (Ancillary equation)"
  protected
    Real x;

  algorithm
    x := (sat.psat)/(4251200);

    sv := (2.342282001767133e+03) *
    (exp((1./x) * ((153.555001827781)*(1-x)^(1.05945977982776) +
    (-251.68092759788)*(1-x)^(1.07461813031477) +
    (-0.00115852135988614)*(1-x)^(31.0414315412162) +
    (98.2088786119097)*(1-x)^(1.09736807994395) +
    (-0.0813158904826729)*(1-x)^(-0.0567328565528613))));

    annotation(smoothOrder = 2,
          Inline=false,
          LateInline=true);
  end dewEntropy;

  redeclare replaceable function temperature_ph
    "Calculates temperature as function of pressure and specific enthalpy"
    extends Modelica.Icons.Function;
    input AbsolutePressure p "Pressure";
    input SpecificEnthalpy h "Specific enthalpy";
    input FixedPhase phase=0
      "2 for two-phase, 1 for one-phase, 0 if not known";
    output Temperature T "Temperature";

  protected
    SmoothTransition st;
    SpecificEnthalpy dh = st.T_ph;
    SpecificEnthalpy h_dew;
    SpecificEnthalpy h_bubble;
    Real x1;
    Real y1;
    Real T1;
    Real x2;
    Real y2;
    Real T2;
    Real x3;
    Real y3;
    Real x_scr;
    Real h_scr;

  algorithm
    h_dew := dewEnthalpy(sat = setSat_p(p=p));
    h_bubble := bubbleEnthalpy(sat = setSat_p(p=p));

    x_scr := (p - 5626000)/ 7.937122694444547e+05;
    h_scr := (4.922497719894971e+05) + (1.048148359001143e+04) .*
    (- 1.0.*x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*
    (x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*
    (x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*
    (x_scr.*(x_scr.*(0.0042379063273480701429241079836174.*x_scr -
    0.0056665301300181996832505681993553) - 0.06923677643883130450319640658563)
     + 0.087904372852007695016141042287927) + 0.48333636242683097883343634748599)
      - 0.56650930294835499800853995111538) - 1.8652339535945099413538628141396)
       + 1.8991943953259100563712991061038) + 4.2652384958819800075957573426422)
        - 3.1628100286115099493144953157753) - 5.6125803762084798265163954056334)
         + 0.66853258243125002202589257649379) + 3.3630472776330000428401945100632)
          + 7.4945545569486000658798730000854) +
          0.63297479481652296762206333369249) - 14.475559644732399533495481591672)
           - 1.5557771209775799192698286788072) +
           11.567522765209199420155528059695) -
           0.59094734360331202527305549665471) -
            2.5206164031253099899743119749473) +
            1.7285710452793801028548159592901) -
            2.3822792500832301598734375147615) -
            0.99329447134191695134575184056303) +
             1.796606554385240084315000785864) +
              0.24320668285780100426052285911283) -
               0.46770818025708599252610042640299) +
                0.040901246637788102322730310334009) -
                 0.14527916463032400362642704294558) +
                 0.70283605459318698738258035518811) -
                  0.28236214483435201350047805135546);

  if p < 4251200 then //SC, SH, SC+smooth or SH + smooth
    if h < h_bubble-dh then // SC
      x1 := (p - 4.041235488839905e+06) / (1.805274693074408e+06);
      y1 := (h - 2.486029669967999e+05) / (1.027165482267890e+05);
     T := 2.891054321927983e+02 + 38.179455046224675 *
     (y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
     (0.00000117000896675711.*x1 - 0.00000252344165469393) - 0.00000442818033527143)
     + 0.0000137408239930132) - 0.00000304459176888354) - 0.0000733653062017981) +
     0.0000822732413493869) - 0.000866434442848853) + 0.0141570965929589) -
     1.0.*y1.*(y1.*(y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000655429257142979.*x1 -
     0.0000575876035469035) - 0.000138332040939908) + 0.000325122353320865) +
     0.000610693426989646) - 0.00145368089923057) +
     y1.*(y1.*(x1.*(x1.*(x1.*
     (0.0000884057055057923.*x1 - 0.000145843218495249) - 0.000300461026832753) +
     0.000427714333625487) - 1.0.*y1.*(x1.*(x1.*(0.000129625534434684.*x1 -
     0.00015702815740582) - 0.000121017686424809) -
     1.0.*y1.*(x1.*(0.0000882965590604829.*x1 - 0.000134931121335093) -
     1.0.*y1.*(0.000016190318111643.*x1 + 0.000028806480439184.*y1 - 0.000140712636885682)
     + 0.0000302977674369355) + 0.000629203883713836) + 0.000320142220802578) -
     1.0.*x1.*(x1.*(x1.*(x1.*(0.000030534882117378.*x1 - 0.000115380186581325) -
     0.000315409842426006) + 0.000414416858260256) + 0.000635450142936112) +
     0.00153534814181972) + 0.000614281886402106) -
     1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000311210124270369.*x1 - 0.00001701566596351)
     - 0.0000146458052341427) + 0.000190533360914324) + 0.000272362328911319)
     - 0.000951055451105003) + 0.0016234031338044) + 0.00304022820580418) +
     x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000233364870360912.*x1 - 0.00000603134578817634)
     - 0.00000106321989624053) + 0.0000643896257694829) + 0.0000428635130074961)
     - 0.000333231094747167) + 0.000594912567427588) - 0.00464881282375404)
     + 0.065502292185914) + 1.04233275843568) -
     1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.000000283374430672429.*x1 -
     0.000000610179700645409) - 0.00000168030035998295) + 0.0000037631211820926) +
     0.00000211810053801695) - 0.0000116136634344803) + 0.00000353541994540162) -
     0.0000279116952445137) + 0.00089806738171536) + 0.00699248765436129)
     + 0.0667794797739423);

    elseif h > h_dew+dh then // SH
      x2 :=(p - 1.993033647584567e+06) / (1.246082578852334e+06);
      y2 :=(h - 7.838395561703714e+05) / (1.171154308646566e+05);
        T := 3.953538152891877e+02 + 53.224991000870915 *
        (x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
       (0.000011420046534142300222983319735182.*x2 - 0.000010504481626702900147972939703944)
       - 0.0001158792000212640032740657458632) + 0.000082591779510494695709654777715514) +
       0.00048211404641921597712117542045007) - 0.00020577662538162500168413548973234) -
       0.0010558221430510700018096104102483) + 0.00014502876587203699450430438577797) +
       0.0012766346499661700934075136970591) + 0.000095552733445217194539582361567653) -
       0.00090936692250190504557133541752023) - 0.00069190855543855200784214565246089) +
       0.001117251157078639903566519286926) + 0.198770382554231989091775290035) -
       1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
       (0.000018356066782322000730410388458225.*x2 - 0.000016040099243055799002697497934733)
       - 0.00019818664293679499281003453248218) + 0.00013324689591302199716260634687615)
       + 0.00091394595811298304059711039570857) - 0.00049727472781944503498613441294651)
       - 0.0018251782309480399889289881087961) + 0.00081630377475914994971767368880933)
       + 0.0012443040687948100225801439933093) - 0.00072406564584729304553945006261984)
       - 0.00046268439358602601136835619222154) + 0.0019766015745603300081401076937482)
       + 0.09087572062123240590469919197858) +
       y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
       (0.000022401208318183298592429081308453.*x2 - 0.000014364300953840199314586779932856)
       - 0.00038201004824181002518870831075048) + 0.00024212534334556298971398435870839)
       + 0.00072733485573110495323034818682117) - 0.00051460745172092600598773293185673)
       + 0.0008351433743540540455968512745244) + 0.000074378415165355705497562954775503)
       - 0.0020782116526090800047443796216839) + 0.00096742144619470303145564171742876)
       + 0.013057565991819000336682243812447) -
       1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
       (0.000018660414564468400736973324738344.*x2 + 0.000084888032917938304237025215481793)
       - 0.00013491030231659099881610930360409) - 0.00024666797096559601315535203980289)
       + 0.00056454674911968595954481209275855) + 0.00032476987402361800040886952167796)
       - 0.0010075717971303800070403955402298) - 0.0005161224517342890161925028635892)
       + 0.0015086442444014599648105523499453) + 0.0048726886243057798350775122742107)
       - 1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
       (0.000084940687436058594683881139975057.*x2 - 0.000035839966209766499212301116283896)
       + 0.00017139623890294799894197519396499) + 0.000026897197031303700782934804069946)
       - 0.0015675745999007900319255348620118) - 0.000083808667433654698191228260562013)
       + 0.0015500008282392299663321466596244) + 0.00047298449283548398090065711940611)
       + 0.0021803539745845401318091738573912) -
       1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
       (0.0000042115285655473404108893077657516.*x2 - 0.000041713891305835600347047542602041)
       - 0.00011164911510035100436315225191919) - 0.0000051665804352162899442963556184694)
       + 0.00010394788658652400327540160640538) - 0.000090824788357840702105773511565445)
       - 0.00010289278137008200312684652599771) + 0.0011081247234808000532574334684455)
       + y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0001150479308278740060754799512388.*x2 +
       0.0000060048888274876302098060666667667) - 0.00038216879715926102296236210875691)
       + 0.000022097694960988501557694677068788) + 0.0003997664084810430111527335128585)
       + 0.000039188530593640901150513655704088) - 0.00028413213593615299591352285624168)
       - 0.00039531129341092600482446273169046) + 0.0015047937634864901046416463259447)
       + 0.0021030355840639899413224700452929) + 0.0036782353927705098775580161429843)
       + 0.0089964605093896497789440758197088) -
       1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
       (0.000018682915417039298736426311542402.*x2 - 0.000015585134605559500980184045593191)
       - 0.00019148731639030800062706294539794) - 0.000075997153185163499023412059241167)
       + 0.00079318329319924898990201711512782) + 0.00054402139170159596447823302511893)
       - 0.001644680290578269922854848239524) - 0.00098651935581815807831118636528345)
       + 0.0013821422621721900399205384957213) + 0.00043649933470030498382577488492018)
       + 0.00051754593853411501400835215136453) + 0.035610476091422899047600481026166)
       + 0.01476831576297620018944911635117) - 0.94328990854991601189283301209798)
       + 0.019916580646296901113689870044254);

    elseif h < h_bubble then //SC + smooth
      x1 := (p - 4.041235488839905e+06) / (1.805274693074408e+06);
      y1 := (h - 2.486029669967999e+05) / (1.027165482267890e+05);
     T1 := 2.891054321927983e+02 + 38.179455046224675 *
     (y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
     (0.00000117000896675711.*x1 - 0.00000252344165469393) - 0.00000442818033527143)
     + 0.0000137408239930132) - 0.00000304459176888354) - 0.0000733653062017981) +
     0.0000822732413493869) - 0.000866434442848853) + 0.0141570965929589) -
     1.0.*y1.*(y1.*(y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000655429257142979.*x1 -
     0.0000575876035469035) - 0.000138332040939908) + 0.000325122353320865) +
     0.000610693426989646) - 0.00145368089923057) +
     y1.*(y1.*(x1.*(x1.*(x1.*
     (0.0000884057055057923.*x1 - 0.000145843218495249) - 0.000300461026832753) +
     0.000427714333625487) - 1.0.*y1.*(x1.*(x1.*(0.000129625534434684.*x1 -
     0.00015702815740582) - 0.000121017686424809) -
     1.0.*y1.*(x1.*(0.0000882965590604829.*x1 - 0.000134931121335093) -
     1.0.*y1.*(0.000016190318111643.*x1 + 0.000028806480439184.*y1 - 0.000140712636885682)
     + 0.0000302977674369355) + 0.000629203883713836) + 0.000320142220802578) -
     1.0.*x1.*(x1.*(x1.*(x1.*(0.000030534882117378.*x1 - 0.000115380186581325) -
     0.000315409842426006) + 0.000414416858260256) + 0.000635450142936112) +
     0.00153534814181972) + 0.000614281886402106) -
     1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000311210124270369.*x1 - 0.00001701566596351)
     - 0.0000146458052341427) + 0.000190533360914324) + 0.000272362328911319)
     - 0.000951055451105003) + 0.0016234031338044) + 0.00304022820580418) +
     x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000233364870360912.*x1 - 0.00000603134578817634)
     - 0.00000106321989624053) + 0.0000643896257694829) + 0.0000428635130074961)
     - 0.000333231094747167) + 0.000594912567427588) - 0.00464881282375404)
     + 0.065502292185914) + 1.04233275843568) -
     1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.000000283374430672429.*x1 -
     0.000000610179700645409) - 0.00000168030035998295) + 0.0000037631211820926) +
     0.00000211810053801695) - 0.0000116136634344803) + 0.00000353541994540162) -
     0.0000279116952445137) + 0.00089806738171536) + 0.00699248765436129)
     + 0.0667794797739423);

      T :=saturationTemperature(p)*(1 - (h_bubble - h)/dh) +
      T1*(h_bubble - h)/dh;

    elseif h > h_dew then //SH + smooth
      x2 :=(p - 1.993033647584567e+06) / (1.246082578852334e+06);
      y2 :=(h - 7.838395561703714e+05) / (1.171154308646566e+05);
      T2 := 3.953538152891877e+02 + 53.224991000870915 *
      (x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
     (0.000011420046534142300222983319735182.*x2 - 0.000010504481626702900147972939703944)
     - 0.0001158792000212640032740657458632) + 0.000082591779510494695709654777715514) +
     0.00048211404641921597712117542045007) - 0.00020577662538162500168413548973234) -
     0.0010558221430510700018096104102483) + 0.00014502876587203699450430438577797) +
     0.0012766346499661700934075136970591) + 0.000095552733445217194539582361567653) -
     0.00090936692250190504557133541752023) - 0.00069190855543855200784214565246089) +
     0.001117251157078639903566519286926) + 0.198770382554231989091775290035) -
     1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
     (0.000018356066782322000730410388458225.*x2 - 0.000016040099243055799002697497934733)
     - 0.00019818664293679499281003453248218) + 0.00013324689591302199716260634687615)
     + 0.00091394595811298304059711039570857) - 0.00049727472781944503498613441294651)
     - 0.0018251782309480399889289881087961) + 0.00081630377475914994971767368880933)
     + 0.0012443040687948100225801439933093) - 0.00072406564584729304553945006261984)
     - 0.00046268439358602601136835619222154) + 0.0019766015745603300081401076937482)
     + 0.09087572062123240590469919197858) +
     y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
     (0.000022401208318183298592429081308453.*x2 - 0.000014364300953840199314586779932856)
     - 0.00038201004824181002518870831075048) + 0.00024212534334556298971398435870839)
     + 0.00072733485573110495323034818682117) - 0.00051460745172092600598773293185673)
     + 0.0008351433743540540455968512745244) + 0.000074378415165355705497562954775503)
     - 0.0020782116526090800047443796216839) + 0.00096742144619470303145564171742876)
     + 0.013057565991819000336682243812447) -
     1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
     (0.000018660414564468400736973324738344.*x2 + 0.000084888032917938304237025215481793)
     - 0.00013491030231659099881610930360409) - 0.00024666797096559601315535203980289)
     + 0.00056454674911968595954481209275855) + 0.00032476987402361800040886952167796)
     - 0.0010075717971303800070403955402298) - 0.0005161224517342890161925028635892)
     + 0.0015086442444014599648105523499453) + 0.0048726886243057798350775122742107)
     - 1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
     (0.000084940687436058594683881139975057.*x2 - 0.000035839966209766499212301116283896)
     + 0.00017139623890294799894197519396499) + 0.000026897197031303700782934804069946)
     - 0.0015675745999007900319255348620118) - 0.000083808667433654698191228260562013)
     + 0.0015500008282392299663321466596244) + 0.00047298449283548398090065711940611)
     + 0.0021803539745845401318091738573912) -
     1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
     (0.0000042115285655473404108893077657516.*x2 - 0.000041713891305835600347047542602041)
     - 0.00011164911510035100436315225191919) - 0.0000051665804352162899442963556184694)
     + 0.00010394788658652400327540160640538) - 0.000090824788357840702105773511565445)
     - 0.00010289278137008200312684652599771) + 0.0011081247234808000532574334684455)
     + y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0001150479308278740060754799512388.*x2 +
     0.0000060048888274876302098060666667667) - 0.00038216879715926102296236210875691)
     + 0.000022097694960988501557694677068788) + 0.0003997664084810430111527335128585)
     + 0.000039188530593640901150513655704088) - 0.00028413213593615299591352285624168)
     - 0.00039531129341092600482446273169046) + 0.0015047937634864901046416463259447)
     + 0.0021030355840639899413224700452929) + 0.0036782353927705098775580161429843)
     + 0.0089964605093896497789440758197088) -
     1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
     (0.000018682915417039298736426311542402.*x2 - 0.000015585134605559500980184045593191)
     - 0.00019148731639030800062706294539794) - 0.000075997153185163499023412059241167)
     + 0.00079318329319924898990201711512782) + 0.00054402139170159596447823302511893)
     - 0.001644680290578269922854848239524) - 0.00098651935581815807831118636528345)
     + 0.0013821422621721900399205384957213) + 0.00043649933470030498382577488492018)
     + 0.00051754593853411501400835215136453) + 0.035610476091422899047600481026166)
     + 0.01476831576297620018944911635117) - 0.94328990854991601189283301209798)
     + 0.019916580646296901113689870044254);

      T := saturationTemperature(p) * (1- (h-h_dew)/dh) + T2*(h-h_dew)/dh;

    else T := saturationTemperature(p);
    end if;

  elseif h < h_scr then //SC
      x1 := (p - 4.041235488839905e+06) / (1.805274693074408e+06);
      y1 := (h - 2.486029669967999e+05) / (1.027165482267890e+05);
      T := 2.891054321927983e+02 + 38.179455046224675 *
       (y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
       (0.00000117000896675711.*x1 - 0.00000252344165469393) - 0.00000442818033527143)
       + 0.0000137408239930132) - 0.00000304459176888354) - 0.0000733653062017981) +
       0.0000822732413493869) - 0.000866434442848853) + 0.0141570965929589) -
       1.0.*y1.*(y1.*(y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000655429257142979.*x1 -
       0.0000575876035469035) - 0.000138332040939908) + 0.000325122353320865) +
       0.000610693426989646) - 0.00145368089923057) +
       y1.*(y1.*(x1.*(x1.*(x1.*
       (0.0000884057055057923.*x1 - 0.000145843218495249) - 0.000300461026832753) +
       0.000427714333625487) - 1.0.*y1.*(x1.*(x1.*(0.000129625534434684.*x1 -
       0.00015702815740582) - 0.000121017686424809) -
       1.0.*y1.*(x1.*(0.0000882965590604829.*x1 - 0.000134931121335093) -
       1.0.*y1.*(0.000016190318111643.*x1 + 0.000028806480439184.*y1 - 0.000140712636885682)
       + 0.0000302977674369355) + 0.000629203883713836) + 0.000320142220802578) -
       1.0.*x1.*(x1.*(x1.*(x1.*(0.000030534882117378.*x1 - 0.000115380186581325) -
       0.000315409842426006) + 0.000414416858260256) + 0.000635450142936112) +
       0.00153534814181972) + 0.000614281886402106) -
       1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000311210124270369.*x1 - 0.00001701566596351)
       - 0.0000146458052341427) + 0.000190533360914324) + 0.000272362328911319)
       - 0.000951055451105003) + 0.0016234031338044) + 0.00304022820580418) +
       x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000233364870360912.*x1 - 0.00000603134578817634)
       - 0.00000106321989624053) + 0.0000643896257694829) + 0.0000428635130074961)
       - 0.000333231094747167) + 0.000594912567427588) - 0.00464881282375404)
       + 0.065502292185914) + 1.04233275843568) -
       1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.000000283374430672429.*x1 -
       0.000000610179700645409) - 0.00000168030035998295) + 0.0000037631211820926) +
       0.00000211810053801695) - 0.0000116136634344803) + 0.00000353541994540162) -
       0.0000279116952445137) + 0.00089806738171536) + 0.00699248765436129)
       + 0.0667794797739423);

  elseif h > h_scr then //SCr
    x3 := (log(p) - 15.535422275045061) / (0.144590303358003);
    y3 := (h - 7.881629843766176e+05) / (1.350198232708690e+05);
    T :=  4.336055951451353e+02 + 37.263139287111660 *
    (y3.*(y3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*
    (0.0000033742936086516001393284351628221.*x3 - 0.0000052959610441299902539101333853733)
    - 0.00001336147201622820001481496687834) + 0.00037869053151413798125393683768891)
    + 0.00025314993134853500805769854764549) - 0.002587841302698379829239083704806)
    - 0.0055258124367728199063942717828013) + 0.019045724056248901356891423120032)
    - 1.0.*y3.*(y3.*(y3.*(y3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*
    (0.0000019400778681995199219107849780697.*x3 + 0.0000011710759938462900446863894018956)
    - 0.00031986208130239902544533769912505) - 0.00014941337854383499126470491447094)
    + 0.0010891572496385200276985960599063) - 0.0033787344230641301601192338921464)
    + 0.011144640838253299167104337641376) +
    y3.*(x3.*(x3.*(x3.*(x3.*(x3.*
    (0.0000071223595109610601672635137038281.*x3 + 0.000071622524569440402511175114419473)
    - 0.0002943707893779259963766559149434) - 0.00095929102367259602972965337741584)
    + 0.0031598086604400000589054631205954) - 0.0030488955215459698569469004780785) +
    y3.*(y3.*(y3.*(y3.*(x3.*(0.000046262661708691399625303225517925.*x3 -
    0.00035169481983737702025447080522724) + y3.*(0.00003205309253730260181250791284846.*y3
    - 0.00013766274466666598812192301437562.*x3 + 0.00022329300319740398930723479509197)
    - 0.00014455011973763299301491691561949) +
    x3.*(x3.*(0.000014797902272448999462474070187845.*x3 - 0.00003718326082658249970031710818219)
    + 0.0012773625087562699535748134138657) - 0.0021002953212055802158231276877132) +
    x3.*(x3.*(x3.*(0.000049907017225351999129348556927255.*x3 +
    0.00009512602811889780496466123560495) - 0.00073164701021327302726121599718567)
    + 0.0023719288742263099772911161267075) + 0.00104834012886865991960594346466) +
    x3.*(x3.*(x3.*(x3.*(0.000055802231421664199532278738402624.*x3 +
    0.00004499388691291329760895204015192) - 0.00019827667547112699970857097042654)
    + 0.00054234226149277298383716283680656) - 0.0056740515485205903281618056155367)
    + 0.0070593594095135501001458955272483) - 0.0076095087872397803793744763822815)
    - 0.0021895010134103899332447262793266) +
    x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.0000005894358176827450136834197352842.*x3 +
    0.0000031691200070917100741450800338583) - 0.000034992283539535396885266499422684)
    - 0.00029754910833909201757149776135236) + 0.00049546694482996802341018272031192)
    + 0.0028389227177469601899606477246607) - 0.0029360875484882201051639594169274)
    - 0.0088690154698935399352199837608168) + 0.0087736404470928706228471938288749) +
    x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.0000020840844909387699439285140251554.*x3 -
    0.0000072243588656460599727059980479371) - 0.0000091071750681226702793871763397249)
    + 0.00061134175244203494900552264823546) + 0.00015202952018902101283953642862912)
    - 0.0029808418208914998735747925451278) + 0.0057006590002557601046251356535777)
    + 0.006853550067848460276842548211107) - 0.024388863121330501410044533372456) -
    1.0.*x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.0000034049672515193801781952735036052.*x3 +
    0.0000072872072599814295999287941385525) - 0.00005306221244142800285998468057258)
    - 0.00030426835164337799827585784306905) + 0.0001158064837462109984743754975689)
    + 0.0019488896592734000681040873459438) + 0.0052208810329451103143805212880579)
    + 0.0021243385165347701722116102729387) + 0.074909595235901793586208441411145)
    + 0.135883343045316989927684403483) -
    1.0.*x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.0000029369713392203500168932232827768.*x3 +
    0.0000037512033862154300987556271307355) - 0.000021948942883687800763006098270225)
    - 0.000045770682737123601503247821709053) - 0.000023854847421342901636447109137151)
    - 0.0011552569405456800891857094271131) - 0.0020823884706331098615184060918182)
    + 0.072621519582528798464338137819141) + 1.1496994124040100793138208246091) -
    1.0.*x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.00000046422208125183601304142603713454.*x3 -
    0.00000051342589606985697873146748740347) - 0.0000032077365697463501616735516430712)
    + 0.00002942416662878469886706345182148) + 0.00013628394933485401012071558390915)
    + 0.00057069281310822097576240796712455) - 0.0065707092038675895748212063551819)
    - 0.16311603387729001202188783281599) - 0.16358209782975000057270165143564);

  end if;

    annotation(derivative(noDerivative=phase)=temperature_ph_der,
          inverse(h=specificEnthalpy_pT(p=p,T=T,phase=phase)),
          Inline=false,
          LateInline=true);
  end temperature_ph;

  redeclare replaceable function temperature_ps
    "Calculates temperature as function of pressure and specific entroy"
    extends Modelica.Icons.Function;
    input AbsolutePressure p "Pressure";
    input SpecificEntropy s "Specific entropy";
    input FixedPhase phase = 0
      "2 for two-phase, 1 for one-phase, 0 if not known";
    output Temperature T "Temperature";

  protected
    SmoothTransition st;
    SpecificEntropy ds = st.T_ps;
    SpecificEntropy s_dew;
    SpecificEntropy s_bubble;
    Real x1;
    Real y1;
    Real T1;
    Real x2;
    Real x3;
    Real y2;
    Real y3;
    Real T2;
    Real T3;
    Real x_scr;
    Real s_scr;

  algorithm
    s_dew := dewEntropy(sat = setSat_p(p=p));
    s_bubble := bubbleEntropy(sat = setSat_p(p=p));
    x_scr :=(p - 5626000)/7.937122694444547e+05;
    s_scr := (1.870199957875619e+03) + (34.138593515726015) .*
    (- 1.0.*x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*
    (x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*
    (x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*(x_scr.*
    (x_scr.*(x_scr.*(0.0041328765121112004052306154733287.*x_scr -
    0.0064640654421623299288879316293333) -
    0.068513085278758503737783769338421) + 0.10600958729814899395016425387439)
     + 0.48795198101353098874000124851591) - 0.74218176553061798728094800026156)
      - 1.9402209964945300590954957442591) + 2.8631386027724099463398488296662)
       + 4.6658800343276496391808905173093) - 6.4767583945753397500766368466429)
        - 6.7979583593367802762941209948622) + 8.0973983535075593209739963640459)
         + 5.484301837125149958751535450574) - 3.3774800435103498053024395630928)
          - 1.5452044675626599445905640095589) - 4.5287835045782003362546674907207)
           - 0.81424066242548898131303758418653) + 6.686905113950150081336687435396)
            + 0.56775375266574201749136818762054) - 2.1614681629844398891293622000376)
             - 0.16424628206821201281684352579759) - 1.5081836943327600053521564404946)
              + 0.29391351839402701795478378699045) + 1.3921869356667699868523868644843)
               - 0.21337405545055199151960323433741) - 0.40506593899630899402453110269562)
                + 0.10635275974881100435887049115991)
                - 0.11989147481647099979795711988118)
                + 0.75696511805692601182471435095067)
                 - 0.23915659273657799421819447616144);

    if  p < 4251200 then //SC, SH, SC+smooth or SH+smooth
      if s < s_bubble - ds then //SC
        x1 :=(log(p) - 14.956558198193330) / (0.745141086421202);
        y1 :=(s - 7.909838086570759e+02) / (4.937245780066642e+02);
        T := 2.538593397712641e+02 + 52.627656402667306 *
        ( y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
        (0.0000018540695730521800001916465916452.*x1 + 0.000019822100829458498788375464538802)
        + 0.000010825483456433400571931185973895) - 0.00042045785286443001496289872953582)
        - 0.0013404227196495599634673556721509) - 0.00055703311951402895412649440842756)
        + 0.0024854821724155499486352827176461) + 0.0026142853405065101871085353479884)
        + 0.0018019846286754901028281938835107) + 0.008344614015424049388580662878212) -
        1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0000061279649903691402188020236063704.*x1
        + 0.00011605676427675299733962427373157) + 0.00043701152278636997425623200719258)
        + 0.000010501023292048399592033165739213) - 0.001940582043775190010728715073185)
        - 0.0012085435953490999538145755920482) + 0.003407044702307640126476284692103)
        + 0.0016886977555409399959218674780459) - 0.005455772996023639659357584719146)
        + y1.*(y1.*(y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00023305594174426600881898374861834.*x1 +
        0.00046950710947453000269902201324612) - 0.0016428099388860100196763092128549)
        - 0.0040970945996329803315272322095097) + 0.0023684495470436598384134097017295)
        + 0.0017113553632027399264980971338446) -
        1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(0.00025162515919732497725672115684858.*x1 +
        0.0010636404746777600172080724405532) - 0.0010213225905910199541037908232965)
        - 0.0037942781936145101619184405450369) + 0.001185886448374189917898124946305)
        - 1.0.*y1.*(y1.*(x1.*(x1.*(0.000099966370595322304399080182157888.*x1 -
        0.00068893894706808904166567275595412) + 0.000078318330435888806732337708016445)
        + 0.00045525533927350398917879847893175) +
        x1.*(x1.*(x1.*(0.000034689711640091398206671435833215.*x1 +
        0.0011470892609501399765636886485254) - 0.00047033110080625401688836362268376)
        - 0.00064499882385151601285611100422557) + 0.00012610550115968699154758714264801)
        + 0.001854955001616359969163205789755) + 0.00049765243201918595364330322183832) -
        1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.000093872095299796495045281663482939.*x1 -
        0.000045987547058992797122459195158228) - 0.0016477664735216799272998766667797)
        - 0.0021901895918355600983984388108183) + 0.0042704665769639996858453301342706)
        + 0.0061339429495558097163443456167897) - 0.0017849524249663399188409185214255)
        + 0.0060694579531333399391446192794319) +
        x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0000082882357811711605789176809944152.*x1
        - 0.00021609131568360400148937072728472) - 0.001151272029115890096692687016855)
        - 0.00072226844913876901352334236605657) + 0.0037966254912213098088313856237619)
        + 0.0043195908930038296250075724458384) - 0.0037449986084672499259129452298112)
        - 0.0037233704617321400874574433004227) + 0.013817633102410300030560286188575)
        - 0.047523326706775601002696873820241) + 1.0136900069785299560720659428625) +
        x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000016737797123044601273309135713863.*x1 +
        0.0000045441322841867902933873750448424) + 0.000043562606607530896766101308204)
        + 0.00018249395394519401267068026140095) + 0.00029236694125483401584392195715623)
        - 0.00011392300917859100634239866156605) - 0.00068110514490659300988750768368618)
        + 0.00010313283801039000451074678643693) + 0.0021580057469805500637571871180853)
        + 0.00667029172008691030593130477655) + 0.017954919259194800779111389488207)
        - 0.043102296905121600945065551968582);
      elseif s > s_dew + ds then //SH
        x2 :=(log(p) - 14.318501326731946) / (0.828373286397511);
        y2 :=(s - 3.078745756126676e+03) / (4.985098646537616e+02);
        T :=4.514567959585206e+02 + 93.462374188837520 *
        (y2.*(y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
        (0.000023871645866490998321709712803873.*x2 + 0.00022071418036034200563233476088953)
        + 0.00053388674771005404599139021470933) - 0.00037592603506479200419290731538524)
        - 0.0022180408964895198878353177462941) - 0.0015557296017925398984305118688098)
        - 0.0037672481753057598767575608889047) +
        y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(0.000045348501778707797562218556608471.*x2 +
        0.00030063485655704001329666108510708) + 0.00025527339492983702274112034480424)
        - 0.0011124520105281299024724273039055) - 0.000052316297070953298082880006392159)
        - 1.0.*y2.*(x2.*(x2.*(x2.*(0.000061841693279203000118381117200528.*x2 +
        0.00024777847613030899243460880576606) - 0.00031243086977994700189492638386923)
        - 0.00093815770323156099253641970747708) -
        1.0.*y2.*(x2.*(x2.*(0.000031172882747484598913757791738277.*x2
        + 0.000066451331496007799595586440499773) - 0.00058433245200618499221034696233801)
        + y2.*(y2.*(0.000020930787778352301245574779153813.*x2 -
        0.0003279183115041469807546259396247.*y2 + 0.00039932334931940801974956101183523)
        - 1.0.*x2.*(0.00004635054612619040129151137819008.*x2 -
        0.00005441183575546649906677990071735) + 0.0023010147784937699799723276328223)
        - 0.0027457569044551798261022401703713) + 0.0047563883825840896912851007982681)
        + 0.0041699087550698598833576191680095) -
        1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(0.000038121588096998897717687659891794.*x2 +
        0.00029383727096873402204885161737025) + 0.00043420609027535199582470415435864)
        - 0.00098105947833207604244498689638476) - 0.0016900398616944000296929973004012)
        - 0.000073107642411849996840617071924839) + 0.0077290298012062602986405046578966)
        - 0.010658551654568599459382838290367) -
        1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.000013111255010575500657321774966579.*x2 +
        0.00013619597651686301056916938989616) + 0.00041715409195621400324782701574122)
        + 0.000027679049458208301572265455647859) - 0.0015385354613466400899163266657865)
        - 0.0014088446559910900324902316427256) - 0.0026573343540690899308720496208025)
        - 0.013004744532890100475186478945488) + 0.038608922211828100579111833212664) +
        x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0000058608984554594798833428159756664.*x2 +
        0.000067114837239045597441430834884102) + 0.00024768280679064502486017018689779)
        + 0.00017616387019545000011677693407819) - 0.00073568750857363302778774150070262)
        - 0.0011210486167048600621848342129283) - 0.00095920701089518504295350354027505)
        - 0.0076650574174039701885741138198682) - 0.013173239169046099816817729788454)
        + 0.97998714093716998707606080643018) -
        1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0000017871384110084299964447875769258.*x2
        + 0.000022185984834418699077496911487017) + 0.00009375325148754320113680255088795)
        + 0.00011204549955887999621636369473876) - 0.0002072129681659319946906983034296)
        - 0.00048257943328370997903772887660523) - 0.00028254721628950097518304107602205)
        - 0.0031889996466997702108392420683458) - 0.018650658195873599104475104581979)
        - 0.36734411217322399112461539516516) - 0.070878979181432502643112059104169);

      elseif s < s_bubble then //SC+smooth
        x1 :=(log(p) - 14.956558198193330) / (0.745141086421202);
        y1 :=(s - 7.909838086570759e+02) / (4.937245780066642e+02);
        T1 := 2.538593397712641e+02 + 52.627656402667306 *
        ( y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
        (0.0000018540695730521800001916465916452.*x1 + 0.000019822100829458498788375464538802)
        + 0.000010825483456433400571931185973895) - 0.00042045785286443001496289872953582)
        - 0.0013404227196495599634673556721509) - 0.00055703311951402895412649440842756)
        + 0.0024854821724155499486352827176461) + 0.0026142853405065101871085353479884)
        + 0.0018019846286754901028281938835107) + 0.008344614015424049388580662878212) -
        1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0000061279649903691402188020236063704.*x1
        + 0.00011605676427675299733962427373157) + 0.00043701152278636997425623200719258)
        + 0.000010501023292048399592033165739213) - 0.001940582043775190010728715073185)
        - 0.0012085435953490999538145755920482) + 0.003407044702307640126476284692103)
        + 0.0016886977555409399959218674780459) - 0.005455772996023639659357584719146)
        + y1.*(y1.*(y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00023305594174426600881898374861834.*x1 +
        0.00046950710947453000269902201324612) - 0.0016428099388860100196763092128549)
        - 0.0040970945996329803315272322095097) + 0.0023684495470436598384134097017295)
        + 0.0017113553632027399264980971338446) -
        1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(0.00025162515919732497725672115684858.*x1 +
        0.0010636404746777600172080724405532) - 0.0010213225905910199541037908232965)
        - 0.0037942781936145101619184405450369) + 0.001185886448374189917898124946305)
        - 1.0.*y1.*(y1.*(x1.*(x1.*(0.000099966370595322304399080182157888.*x1 -
        0.00068893894706808904166567275595412) + 0.000078318330435888806732337708016445)
        + 0.00045525533927350398917879847893175) +
        x1.*(x1.*(x1.*(0.000034689711640091398206671435833215.*x1 +
        0.0011470892609501399765636886485254) - 0.00047033110080625401688836362268376)
        - 0.00064499882385151601285611100422557) + 0.00012610550115968699154758714264801)
        + 0.001854955001616359969163205789755) + 0.00049765243201918595364330322183832) -
        1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.000093872095299796495045281663482939.*x1 -
        0.000045987547058992797122459195158228) - 0.0016477664735216799272998766667797)
        - 0.0021901895918355600983984388108183) + 0.0042704665769639996858453301342706)
        + 0.0061339429495558097163443456167897) - 0.0017849524249663399188409185214255)
        + 0.0060694579531333399391446192794319) +
        x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0000082882357811711605789176809944152.*x1
        - 0.00021609131568360400148937072728472) - 0.001151272029115890096692687016855)
        - 0.00072226844913876901352334236605657) + 0.0037966254912213098088313856237619)
        + 0.0043195908930038296250075724458384) - 0.0037449986084672499259129452298112)
        - 0.0037233704617321400874574433004227) + 0.013817633102410300030560286188575)
        - 0.047523326706775601002696873820241) + 1.0136900069785299560720659428625) +
        x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000016737797123044601273309135713863.*x1 +
        0.0000045441322841867902933873750448424) + 0.000043562606607530896766101308204)
        + 0.00018249395394519401267068026140095) + 0.00029236694125483401584392195715623)
        - 0.00011392300917859100634239866156605) - 0.00068110514490659300988750768368618)
        + 0.00010313283801039000451074678643693) + 0.0021580057469805500637571871180853)
        + 0.00667029172008691030593130477655) + 0.017954919259194800779111389488207)
        - 0.043102296905121600945065551968582);

        T := saturationTemperature(p)*(1 - (s_bubble - s)/ds) + T1*(s_bubble - s)/ds;
      elseif s > s_dew then //SH+smooth
        x2 :=(log(p) - 14.318501326731946) / (0.828373286397511);
        y2 :=(s - 3.078745756126676e+03) / (4.985098646537616e+02);
        T2 :=4.514567959585206e+02 + 93.462374188837520 *
        (y2.*(y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
        (0.000023871645866490998321709712803873.*x2 + 0.00022071418036034200563233476088953)
        + 0.00053388674771005404599139021470933) - 0.00037592603506479200419290731538524)
        - 0.0022180408964895198878353177462941) - 0.0015557296017925398984305118688098)
        - 0.0037672481753057598767575608889047) +
        y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(0.000045348501778707797562218556608471.*x2 +
        0.00030063485655704001329666108510708) + 0.00025527339492983702274112034480424)
        - 0.0011124520105281299024724273039055) - 0.000052316297070953298082880006392159)
        - 1.0.*y2.*(x2.*(x2.*(x2.*(0.000061841693279203000118381117200528.*x2 +
        0.00024777847613030899243460880576606) - 0.00031243086977994700189492638386923)
        - 0.00093815770323156099253641970747708) -
        1.0.*y2.*(x2.*(x2.*(0.000031172882747484598913757791738277.*x2
        + 0.000066451331496007799595586440499773) - 0.00058433245200618499221034696233801)
        + y2.*(y2.*(0.000020930787778352301245574779153813.*x2 -
        0.0003279183115041469807546259396247.*y2 + 0.00039932334931940801974956101183523)
        - 1.0.*x2.*(0.00004635054612619040129151137819008.*x2 -
        0.00005441183575546649906677990071735) + 0.0023010147784937699799723276328223)
        - 0.0027457569044551798261022401703713) + 0.0047563883825840896912851007982681)
        + 0.0041699087550698598833576191680095) -
        1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(0.000038121588096998897717687659891794.*x2 +
        0.00029383727096873402204885161737025) + 0.00043420609027535199582470415435864)
        - 0.00098105947833207604244498689638476) - 0.0016900398616944000296929973004012)
        - 0.000073107642411849996840617071924839) + 0.0077290298012062602986405046578966)
        - 0.010658551654568599459382838290367) -
        1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.000013111255010575500657321774966579.*x2 +
        0.00013619597651686301056916938989616) + 0.00041715409195621400324782701574122)
        + 0.000027679049458208301572265455647859) - 0.0015385354613466400899163266657865)
        - 0.0014088446559910900324902316427256) - 0.0026573343540690899308720496208025)
        - 0.013004744532890100475186478945488) + 0.038608922211828100579111833212664) +
        x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0000058608984554594798833428159756664.*x2 +
        0.000067114837239045597441430834884102) + 0.00024768280679064502486017018689779)
        + 0.00017616387019545000011677693407819) - 0.00073568750857363302778774150070262)
        - 0.0011210486167048600621848342129283) - 0.00095920701089518504295350354027505)
        - 0.0076650574174039701885741138198682) - 0.013173239169046099816817729788454)
        + 0.97998714093716998707606080643018) -
        1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0000017871384110084299964447875769258.*x2
        + 0.000022185984834418699077496911487017) + 0.00009375325148754320113680255088795)
        + 0.00011204549955887999621636369473876) - 0.0002072129681659319946906983034296)
        - 0.00048257943328370997903772887660523) - 0.00028254721628950097518304107602205)
        - 0.0031889996466997702108392420683458) - 0.018650658195873599104475104581979)
        - 0.36734411217322399112461539516516) - 0.070878979181432502643112059104169);

        T := saturationTemperature(p)*(1 - (s - s_dew)/ds) + T2*(s - s_dew)/ ds;
      else
        T := saturationTemperature(p);
      end if;
    elseif s > s_scr then //SCr
      x3 :=(log(p) - 15.532862129851294) / (0.142779720953699);
      y3 :=(s - 2.867381298444032e+03) / (5.754406745273917e+02);
      T := 4.802460670250321e+02 + 85.118105694639310 *
      (y3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*
     (0.0000030810634322552198592886502082067.*x3 + 0.0000049511752535671902430221454072257)
     - 0.000011472486838336599631119061548645) - 0.000035013238441132898243722537667821)
     - 0.0000091486573602125702015658292864941) + 0.000068663359317299401036495398731319)
     + 0.00028986746491832201567950821896602) - 0.0015669347376528000321399547445367)
     - 0.0158976733883323013973853932157) -
     1.0.*y3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.0000016923372085068100495344831785127.*x3
     - 0.0000035675574461155598093625631456183) - 0.000059364211401876597871702517794645)
     + 0.000051456970054742597650131868958212) + 0.000013832657921558900147602361174748)
     + 0.0010367510348095201021256794859937) - 0.00053771627817557896607952860890123)
     - 0.013934442955535600305871923865197) +
     y3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.0000043782718046079103271219987170149.*x3
     - 0.0000054086917380047102235228646816001) - 0.000068166848600361798515313849211594)
     + 0.000020000152362463999723262569885307) - 0.00025033274585198599538476971204659)
     - 0.0072924252114060202425993573172036) + 0.012657577948992200511657557626677)
     + y3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.000021246684957092699041428934814135.*x3
     - 0.00002004701546744189875220477914386) + 0.00010614605025835700217052420812891)
     - 0.0012585378263192000241471601995613) + 0.006767094202007280234756336767532)
     + 0.0036491894523000400346601779233424) +
     y3.*(x3.*(x3.*(x3.*(x3.*(0.00002132969573278640007855076754506.*x3 +
     0.0000011135651164395299522519213603067) + 0.00059426328795065804042746515634121)
     + 0.003851542678358379784980813909101) - 0.01816515829629389983113085804689) -
     1.0.*y3.*(y3.*(x3.*(x3.*(0.00016800786441593300400004773464957.*x3 +
     0.00056336610766018603655563845578058) - 0.0027971494565493001775713377554666)
     - 1.0.*y3.*(y3.*(0.00025260539289676502009221459310595.*x3 -
     0.0019430998936420199735275460284356.*y3 + 0.0028160950022077598127456798948742)
     + x3.*(0.00072470640453014395759162580290536.*x3 - 0.0023070864337761801989012955260705)
     + 0.012096507930977299857810969285765) + 0.022696574571143598303413213557178) +
     x3.*(x3.*(x3.*(0.000047417050892723402284126971162337.*x3 -
     0.00032693876147299498957296548518059) + 0.0042730217801444604283633843522239)
     - 0.0084813629066681408413819198699457) + 0.0099190463926993495402673062244503)
     + 0.040732114896710601426033093730439) - 0.036905091337624901237646213303378) +
     0.054243591605750700324062307799977) - 0.14912875678376399934954577020108) +
     1.0948254550769300763590763381217) -
     1.0.*x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(x3.*(0.000000054605611025699400966262192502754.*x3
     + 0.0000028703136037129198632840334365346) + 0.0000026678013327042899632205851662148)
     - 0.000013623392570037300602957611173061) - 0.000001030788667206349947414335127549)
     + 0.000014609983555754299403093426912292) + 0.0000051822867054671199003716176856305)
     - 0.000017149642101417999991196453035691) - 0.0012345769752532299856628839052064)
     - 0.089731383760604105370717320511176) - 0.18644467182228499635421314906125);

    elseif s < s_scr then //SC
        x1 :=(log(p) - 14.956558198193330) / (0.745141086421202);
        y1 :=(s - 7.909838086570759e+02) / (4.937245780066642e+02);
        T := 2.538593397712641e+02 + 52.627656402667306 *
        ( y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
        (0.0000018540695730521800001916465916452.*x1 + 0.000019822100829458498788375464538802)
        + 0.000010825483456433400571931185973895) - 0.00042045785286443001496289872953582)
        - 0.0013404227196495599634673556721509) - 0.00055703311951402895412649440842756)
        + 0.0024854821724155499486352827176461) + 0.0026142853405065101871085353479884)
        + 0.0018019846286754901028281938835107) + 0.008344614015424049388580662878212) -
        1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0000061279649903691402188020236063704.*x1
        + 0.00011605676427675299733962427373157) + 0.00043701152278636997425623200719258)
        + 0.000010501023292048399592033165739213) - 0.001940582043775190010728715073185)
        - 0.0012085435953490999538145755920482) + 0.003407044702307640126476284692103)
        + 0.0016886977555409399959218674780459) - 0.005455772996023639659357584719146)
        + y1.*(y1.*(y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00023305594174426600881898374861834.*x1 +
        0.00046950710947453000269902201324612) - 0.0016428099388860100196763092128549)
        - 0.0040970945996329803315272322095097) + 0.0023684495470436598384134097017295)
        + 0.0017113553632027399264980971338446) -
        1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(0.00025162515919732497725672115684858.*x1 +
        0.0010636404746777600172080724405532) - 0.0010213225905910199541037908232965)
        - 0.0037942781936145101619184405450369) + 0.001185886448374189917898124946305)
        - 1.0.*y1.*(y1.*(x1.*(x1.*(0.000099966370595322304399080182157888.*x1 -
        0.00068893894706808904166567275595412) + 0.000078318330435888806732337708016445)
        + 0.00045525533927350398917879847893175) +
        x1.*(x1.*(x1.*(0.000034689711640091398206671435833215.*x1 +
        0.0011470892609501399765636886485254) - 0.00047033110080625401688836362268376)
        - 0.00064499882385151601285611100422557) + 0.00012610550115968699154758714264801)
        + 0.001854955001616359969163205789755) + 0.00049765243201918595364330322183832) -
        1.0.*x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.000093872095299796495045281663482939.*x1 -
        0.000045987547058992797122459195158228) - 0.0016477664735216799272998766667797)
        - 0.0021901895918355600983984388108183) + 0.0042704665769639996858453301342706)
        + 0.0061339429495558097163443456167897) - 0.0017849524249663399188409185214255)
        + 0.0060694579531333399391446192794319) +
        x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0000082882357811711605789176809944152.*x1
        - 0.00021609131568360400148937072728472) - 0.001151272029115890096692687016855)
        - 0.00072226844913876901352334236605657) + 0.0037966254912213098088313856237619)
        + 0.0043195908930038296250075724458384) - 0.0037449986084672499259129452298112)
        - 0.0037233704617321400874574433004227) + 0.013817633102410300030560286188575)
        - 0.047523326706775601002696873820241) + 1.0136900069785299560720659428625) +
        x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.00000016737797123044601273309135713863.*x1 +
        0.0000045441322841867902933873750448424) + 0.000043562606607530896766101308204)
        + 0.00018249395394519401267068026140095) + 0.00029236694125483401584392195715623)
        - 0.00011392300917859100634239866156605) - 0.00068110514490659300988750768368618)
        + 0.00010313283801039000451074678643693) + 0.0021580057469805500637571871180853)
        + 0.00667029172008691030593130477655) + 0.017954919259194800779111389488207)
        - 0.043102296905121600945065551968582);
    end if;

  annotation(derivative(noDerivative=phase)=temperature_ps_der,
          Inline=false,
          LateInline=true);
  end temperature_ps;
  //aktuell neue Einteilung eingesetzt;
  //für SH einen wird ein Fit alten Einteilung eingesetzt, nur als Test

  redeclare replaceable function density_pT
    "Computes density as a function of pressure and temperature"
    extends Modelica.Icons.Function;
    input AbsolutePressure p "Pressure";
    input Temperature T "Temperature";
    input FixedPhase phase = 0
      "2 for two-phase, 1 for one-phase, 0 if not known";
    output Density d "Density";

  protected
    SmoothTransition st;
    AbsolutePressure dp = st.d_pT;
    SaturationProperties sat = setSat_T(T=T);
    Real x1;
    Real y1;
    Real d1;
    Real x2;
    Real y2;
    Real d2;
    Real x3;
    Real y3;
    Real x4;
    Real y4;
    Real x5;
    Real y5;
    Real x6;
    Real y6;
    Real fitSCrSH;
    Real fitSCrSC;
    Real x_SCrSH;
    Real x_SCrSC;

  algorithm

    if T<3.619000000000000e+02 then
       fitSCrSH :=999E5;
       fitSCrSC :=0;
    elseif T > 367.05 then
      fitSCrSC := 999E5;
    elseif T > 420 then
       fitSCrSH :=999E5;

     else
      x_SCrSH :=(T - 3.751389867841397e+02)/6.748817289272371;

      fitSCrSH := 4484000 + 4.588491037367295e+05 *
      (x_SCrSH.*(x_SCrSH.*(x_SCrSH.*(x_SCrSH.*(x_SCrSH.*(x_SCrSH.*(x_SCrSH.*
      (0.015209908717751900730785763471431.*x_SCrSH +
      0.046320495893417600041797044241321) - 0.0082153068059844496645593991956957)
       - 0.11148556522006400348878685235832) - 0.020760698619444298979042073938217)
        + 0.11065868066261999591581854929245) + 0.11892623287364099959884100599083)
         + 0.94348788392234894661925181935658) - 0.11790565496120999910978355273983);

      x_SCrSC :=(T - 3.700391126494653e+02)/5.414482959937001;

      fitSCrSC := 4484000 + 4.588491037367295e+05 *
      (x_SCrSC.*(x_SCrSC.*(x_SCrSC.*(x_SCrSC.*(x_SCrSC.*(x_SCrSC.*(x_SCrSC.*
      (0.0017736998652662400600271697115318.*x_SCrSC -
       0.0015826277281241699773639552972782) - 0.011600796466347200464053202040304)
        + 0.00066498538818381299191767608292025) + 0.015141221829670299323100657318264)
         - 0.0092107792805705898664392350383423) - 0.10143932224104400263708924967432)
          + 1.1071294437635699203781314281514) + 0.12372023094272699417217609152431);

    end if;

       if p < 3.691838925844686e+06 then //SC, SH, SC+smooth or SH+smooth
         if p < sat.psat - dp then //SH
           x1 :=(p - 2.980358857267919e+06)/2.003389387197036e+06;
           y1 :=(T - 4.054229562317557e+02)/45.958409114606440;

           d := 56.635211776407670 + 51.170196305935875 *
           (x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
           (0.011919623925975399506005381056184.*x1 - 0.016816560599086500388255061011478)
           - 0.07543923526631310383372408523428) + 0.076632784026946995648010840795905)
           + 0.1760739134081940049370018641639) - 0.077544625638353903429589308871073)
           - 0.090293980495413803111226513919974) + 0.21328829121014900027653027336783)
           + 0.85895297834434802819458809608477) -
           1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.012879324334213800018478224274077.*x1
           + 0.022779697731843000924056852340982) - 0.17512872865231199348556856421055)
           - 0.15053239066762599818183332445187) + 0.57917641678307096864131153779454)
           + 0.46957280700831199871103649456927) - 0.35838786101812197815164040548552)
           - 0.06079746500645689943898020146662) + 0.41623962468900699285256905568531)
           - 1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.03773789002180810009390299342158.*x1
           - 0.077145880454219897814915896105958) - 0.4509863927636360014794547623751)
           + 0.22920671119316399222398672463896) + 1.4523996944188799496089359308826)
           + 0.55547982548661400947764832380926) - 0.53432536208958003598468167183455)
           - 0.081640581919811702760192417827056) -
           1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0084090709705604005375079168516095.*x1
           - 0.32466902225279198335172736733512) - 0.53038294176720002237601647721021)
           + 1.0694028400878399231999082985567) + 2.0797721641243498424955760128796)
           + 0.38718966280930999790399482662906) - 0.4452732888600430261050178160076)
           + y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.099897184029952096340210232483514.*x1 +
           0.59860107118300598383342503439053) + 0.3507166512461529772615165256866)
           - 1.4655366225692401105362705493462) - 1.7297359925955699821997768594883)
           - 0.2600455735307929949762240084965) +
           y1.*(y1.*(x1.*(x1.*(x1.*(0.2443676879831049864044700825616.*x1 +
           0.6880164705909640465719689927937) + 0.38126112558704500221651301217207)
           - 0.23723182745500701051888370329834) +
           y1.*(y1.*(x1.*(0.057461822075289298306088880963216.*x1 +
           0.10233644571842000214889623066483) -
           1.0.*y1.*(0.0069500300445884703390286851742985.*x1 -
           0.00018435603001877299807545473875336.*y1 + 0.0077030222964082298992005704008079)
           + 0.038086755027373499216114538512556) -
           1.0.*x1.*(x1.*(0.17271422877019299013667819053808.*x1 +
           0.38727089420489202442610121579492) + 0.20571295331240099790726105766225)
           + 0.0034502714612830698813483731868246) - 0.15142684892312499589372976060986) -
           1.0.*x1.*(x1.*(x1.*(x1.*(0.20396211570385200384514234883682.*x1 +
           0.76365527515374997946651092206594) + 0.34573816250793598658930250167032)
           - 0.96361537425684395952174554622616) - 0.80751514341452801382104098593118)
           + 0.086954809094423601845136317933793) + 0.12572175574167598899322229044628)
           - 0.058010861375621003421798604904325) + 0.11845249608356600568015437602298)
           + 0.24679776490568000602010556576715) - 0.15540540706114100433232749765011);

         elseif p>sat.psat+dp then //"SC"
           x2 := (p - 4.066785093386197e+06)/1.790595204246330e+06;
           y2 := (T - 2.927309039344773e+02)/36.935791732092900;

           d := 5.021637908690308e+02 + 57.120656672831736*
           (0.12262862182525699483726100424974 -
           1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.000091907229466726205217505518696441.*x2 + 0.00076466359628431300292372707616551)
           - 0.00084794097380833099997232693567639) - 0.0083256240018455794638096989501719)
           + 0.0029471342229610598961730971723227) + 0.035771489849177502684529628140808)
           - 0.004494688782804259936931590146969) - 0.07616668487020640532225712604486)
           + 0.0018972973411420699339779982750542) + 0.081617794317479397392389728338458)
           + 0.0026720114861563900622576372967387) - 0.037308708605431999127954867390144)
           - 0.0040042546391540999317637528065461) + 0.001368396182465019894972102498798)
           + 0.0057290497777046202679263053880732) - 0.073163051957221905685635476856987)
           - 1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.000181915684599462997711460943151.*x2 - 0.0031056708591826599590024482466788)
           - 0.0025538654810376500321755788291966) + 0.028673854895624299038425775165706)
           + 0.012334278262432099224077397536803) - 0.10032440456470299861013728559556)
           - 0.027481766236180898976826370017079) + 0.15929005304882198901239576116495)
           + 0.02880424702602099942816415989455) - 0.093809679162435793964291974589287)
           - 0.0085873237274430008064696195901888) - 0.029344851886916701461105461135048)
           - 0.0072274366921431599034009174431503) + 0.05773214768054780315909013665987)
           - 0.043216034954685803026741552912426) +
           y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.0035766602595110300218117505011151.*x2 - 0.0060412017864735802208375758937109)
           - 0.021584180633963900158844850807327) + 0.034643321554980899268372240840108)
           + 0.037138567451163097266064738732894) - 0.044696863208089999963679161965047)
           + 0.0099753810512557602313554738771018) - 0.074854606876689405714486724718881)
           - 0.094644611211912296755421891703008) + 0.23230748191189198870176824129885)
           + 0.094768333978594604394274369951745) - 0.19191470859917300617603075352235)
           - 0.035585609133306897455817363606911) +
           y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.00084697060309847996013160598138825.*x2 - 0.0026320007059685898015422012008457)
           + 0.0072013508689210796454016616507943) - 0.0042180626423531895896612553542582)
           - 0.056073187527737197721755535440025) + 0.070506846210398002594565980416519)
           + 0.1249976354391330035653595587064) - 0.16522615943805099569807737225347)
           - 0.11267718745497500021368608713601) + 0.14728598157614200547804728103074)
           + 0.028452560500273900434553553395745) +
           y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0010864151394385499795058880323495.*x2
           + 0.00039991852222477500874292521970688) - 0.014032388835576300664675919449564)
           + 0.0073549786785354204221576424060913) + 0.042876757496619302689744301915198)
           - 0.030679554871998998555326920723019) - 0.046839754103827097031498283286055)
           + 0.035361656410155602181522027649407) + 0.017342513306582200971472929040829)
           - 0.015606538633083300721127173460445) -
           1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.00094094031813350600262912948323901.*x2
           - 0.00088512337220290502812214405992108) - 0.0092175626522195703432815960809421)
           + 0.009498786129154309157418545339624) + 0.026375040840329100344519019927247)
           - 0.027205339050262001415747548094259) - 0.028120338152188700808764565408637)
           + 0.028330326542148700358358937023695) + 0.010189574114692999742826096110093)
           - 0.010967761390271899349380113619645) + 0.003616012983794550210425722269747)
           - 0.040470337630137596940382849197704) -
           1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.0032386666943906797927477114740213.*x2 - 0.0050527558364963703549377349588667)
           - 0.010469542485642899243281078724976) + 0.016273675482176098994191448809943)
           - 0.015792738874142498578523330365897) + 0.019846587068858900088086372193175)
           + 0.090852284055483997771140991517314) - 0.11785801095474300603793693653643)
           - 0.10276695796280199690642120913253) + 0.12826619535132199878546543914126)
           + 0.028268390637130200171434069034149) - 0.036817044774666997375422994309702)
           + 0.0028239816040532901737780679951584) + 0.082496575181314105162933003612125)
           - 1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.001794758022732010098107546802737.*x2 - 0.0051775545533456297439545146232831)
           - 0.0145379218778659002886399775889) + 0.039848468281055399176082687517919)
           + 0.041651094669994698227455387495866) - 0.10529675659250499475394491355473)
           - 0.045175928825986200187969643593533) + 0.094437721088724294049576712950511)
           + 0.0007607961729420890332337146233499) + 0.031185927459760200836091925680194)
           + 0.023097251403410300890639561544049) - 0.083497623942092105697732051794446)
           - 0.0052991733884140100607762491335961) + 0.051498619802801598455133103016124)
           + 0.10970988605360799950094730093042) + 0.9007662493033889994364926678827));

         elseif p<sat.psat then //"SH + smooth"

           x1 :=(p - 2.980358857267919e+06)/2.003389387197036e+06;
           y1 :=(T - 4.054229562317557e+02)/45.958409114606440;

           d1 := 56.635211776407670 + 51.170196305935875 *
           (x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
           (0.011919623925975399506005381056184.*x1 - 0.016816560599086500388255061011478)
           - 0.07543923526631310383372408523428) + 0.076632784026946995648010840795905)
           + 0.1760739134081940049370018641639) - 0.077544625638353903429589308871073)
           - 0.090293980495413803111226513919974) + 0.21328829121014900027653027336783)
           + 0.85895297834434802819458809608477) -
           1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.012879324334213800018478224274077.*x1
           + 0.022779697731843000924056852340982) - 0.17512872865231199348556856421055)
           - 0.15053239066762599818183332445187) + 0.57917641678307096864131153779454)
           + 0.46957280700831199871103649456927) - 0.35838786101812197815164040548552)
           - 0.06079746500645689943898020146662) + 0.41623962468900699285256905568531)
           - 1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.03773789002180810009390299342158.*x1
           - 0.077145880454219897814915896105958) - 0.4509863927636360014794547623751)
           + 0.22920671119316399222398672463896) + 1.4523996944188799496089359308826)
           + 0.55547982548661400947764832380926) - 0.53432536208958003598468167183455)
           - 0.081640581919811702760192417827056) -
           1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0084090709705604005375079168516095.*x1
           - 0.32466902225279198335172736733512) - 0.53038294176720002237601647721021)
           + 1.0694028400878399231999082985567) + 2.0797721641243498424955760128796)
           + 0.38718966280930999790399482662906) - 0.4452732888600430261050178160076)
           + y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.099897184029952096340210232483514.*x1 +
           0.59860107118300598383342503439053) + 0.3507166512461529772615165256866)
           - 1.4655366225692401105362705493462) - 1.7297359925955699821997768594883)
           - 0.2600455735307929949762240084965) +
           y1.*(y1.*(x1.*(x1.*(x1.*(0.2443676879831049864044700825616.*x1 +
           0.6880164705909640465719689927937) + 0.38126112558704500221651301217207)
           - 0.23723182745500701051888370329834) +
           y1.*(y1.*(x1.*(0.057461822075289298306088880963216.*x1 +
           0.10233644571842000214889623066483) -
           1.0.*y1.*(0.0069500300445884703390286851742985.*x1 -
           0.00018435603001877299807545473875336.*y1 + 0.0077030222964082298992005704008079)
           + 0.038086755027373499216114538512556) -
           1.0.*x1.*(x1.*(0.17271422877019299013667819053808.*x1 +
           0.38727089420489202442610121579492) + 0.20571295331240099790726105766225)
           + 0.0034502714612830698813483731868246) - 0.15142684892312499589372976060986) -
           1.0.*x1.*(x1.*(x1.*(x1.*(0.20396211570385200384514234883682.*x1 +
           0.76365527515374997946651092206594) + 0.34573816250793598658930250167032)
           - 0.96361537425684395952174554622616) - 0.80751514341452801382104098593118)
           + 0.086954809094423601845136317933793) + 0.12572175574167598899322229044628)
           - 0.058010861375621003421798604904325) + 0.11845249608356600568015437602298)
           + 0.24679776490568000602010556576715) - 0.15540540706114100433232749765011);

           d := bubbleDensity(sat)*(1 -(sat.psat - p)/dp) + d1*(sat.psat - p)/dp;

         elseif p > sat.psat then //SC+smooth
           x2 := (p - 4.066785093386197e+06)/1.790595204246330e+06;
           y2 := (T - 2.927309039344773e+02)/36.935791732092900;

           d2 := 5.021637908690308e+02 + 57.120656672831736*
           (0.12262862182525699483726100424974 -
           1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.000091907229466726205217505518696441.*x2 + 0.00076466359628431300292372707616551)
           - 0.00084794097380833099997232693567639) - 0.0083256240018455794638096989501719)
           + 0.0029471342229610598961730971723227) + 0.035771489849177502684529628140808)
           - 0.004494688782804259936931590146969) - 0.07616668487020640532225712604486)
           + 0.0018972973411420699339779982750542) + 0.081617794317479397392389728338458)
           + 0.0026720114861563900622576372967387) - 0.037308708605431999127954867390144)
           - 0.0040042546391540999317637528065461) + 0.001368396182465019894972102498798)
           + 0.0057290497777046202679263053880732) - 0.073163051957221905685635476856987)
           - 1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.000181915684599462997711460943151.*x2 - 0.0031056708591826599590024482466788)
           - 0.0025538654810376500321755788291966) + 0.028673854895624299038425775165706)
           + 0.012334278262432099224077397536803) - 0.10032440456470299861013728559556)
           - 0.027481766236180898976826370017079) + 0.15929005304882198901239576116495)
           + 0.02880424702602099942816415989455) - 0.093809679162435793964291974589287)
           - 0.0085873237274430008064696195901888) - 0.029344851886916701461105461135048)
           - 0.0072274366921431599034009174431503) + 0.05773214768054780315909013665987)
           - 0.043216034954685803026741552912426) +
           y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.0035766602595110300218117505011151.*x2 - 0.0060412017864735802208375758937109)
           - 0.021584180633963900158844850807327) + 0.034643321554980899268372240840108)
           + 0.037138567451163097266064738732894) - 0.044696863208089999963679161965047)
           + 0.0099753810512557602313554738771018) - 0.074854606876689405714486724718881)
           - 0.094644611211912296755421891703008) + 0.23230748191189198870176824129885)
           + 0.094768333978594604394274369951745) - 0.19191470859917300617603075352235)
           - 0.035585609133306897455817363606911) +
           y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.00084697060309847996013160598138825.*x2 - 0.0026320007059685898015422012008457)
           + 0.0072013508689210796454016616507943) - 0.0042180626423531895896612553542582)
           - 0.056073187527737197721755535440025) + 0.070506846210398002594565980416519)
           + 0.1249976354391330035653595587064) - 0.16522615943805099569807737225347)
           - 0.11267718745497500021368608713601) + 0.14728598157614200547804728103074)
           + 0.028452560500273900434553553395745) +
           y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0010864151394385499795058880323495.*x2
           + 0.00039991852222477500874292521970688) - 0.014032388835576300664675919449564)
           + 0.0073549786785354204221576424060913) + 0.042876757496619302689744301915198)
           - 0.030679554871998998555326920723019) - 0.046839754103827097031498283286055)
           + 0.035361656410155602181522027649407) + 0.017342513306582200971472929040829)
           - 0.015606538633083300721127173460445) -
           1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.00094094031813350600262912948323901.*x2
           - 0.00088512337220290502812214405992108) - 0.0092175626522195703432815960809421)
           + 0.009498786129154309157418545339624) + 0.026375040840329100344519019927247)
           - 0.027205339050262001415747548094259) - 0.028120338152188700808764565408637)
           + 0.028330326542148700358358937023695) + 0.010189574114692999742826096110093)
           - 0.010967761390271899349380113619645) + 0.003616012983794550210425722269747)
           - 0.040470337630137596940382849197704) -
           1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.0032386666943906797927477114740213.*x2 - 0.0050527558364963703549377349588667)
           - 0.010469542485642899243281078724976) + 0.016273675482176098994191448809943)
           - 0.015792738874142498578523330365897) + 0.019846587068858900088086372193175)
           + 0.090852284055483997771140991517314) - 0.11785801095474300603793693653643)
           - 0.10276695796280199690642120913253) + 0.12826619535132199878546543914126)
           + 0.028268390637130200171434069034149) - 0.036817044774666997375422994309702)
           + 0.0028239816040532901737780679951584) + 0.082496575181314105162933003612125)
           - 1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
           (0.001794758022732010098107546802737.*x2 - 0.0051775545533456297439545146232831)
           - 0.0145379218778659002886399775889) + 0.039848468281055399176082687517919)
           + 0.041651094669994698227455387495866) - 0.10529675659250499475394491355473)
           - 0.045175928825986200187969643593533) + 0.094437721088724294049576712950511)
           + 0.0007607961729420890332337146233499) + 0.031185927459760200836091925680194)
           + 0.023097251403410300890639561544049) - 0.083497623942092105697732051794446)
           - 0.0052991733884140100607762491335961) + 0.051498619802801598455133103016124)
           + 0.10970988605360799950094730093042) + 0.9007662493033889994364926678827));

           d := dewDensity(sat)*(1 -(p - sat.psat)/dp) + d2*(p - sat.psat)/dp;

         end if;

       elseif p < 4251200 then //SC,SH,Tra1 or Tra2
         if p > sat.psat then //SC or Tra1
           if p > fitSCrSC then //SC
             x2 := (p - 4.066785093386197e+06)/1.790595204246330e+06;
             y2 := (T - 2.927309039344773e+02)/36.935791732092900;

             d := 5.021637908690308e+02 + 57.120656672831736*
             (0.12262862182525699483726100424974 -
             1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
             (0.000091907229466726205217505518696441.*x2 + 0.00076466359628431300292372707616551)
             - 0.00084794097380833099997232693567639) - 0.0083256240018455794638096989501719)
             + 0.0029471342229610598961730971723227) + 0.035771489849177502684529628140808)
             - 0.004494688782804259936931590146969) - 0.07616668487020640532225712604486)
             + 0.0018972973411420699339779982750542) + 0.081617794317479397392389728338458)
             + 0.0026720114861563900622576372967387) - 0.037308708605431999127954867390144)
             - 0.0040042546391540999317637528065461) + 0.001368396182465019894972102498798)
             + 0.0057290497777046202679263053880732) - 0.073163051957221905685635476856987)
             - 1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
             (0.000181915684599462997711460943151.*x2 - 0.0031056708591826599590024482466788)
             - 0.0025538654810376500321755788291966) + 0.028673854895624299038425775165706)
             + 0.012334278262432099224077397536803) - 0.10032440456470299861013728559556)
             - 0.027481766236180898976826370017079) + 0.15929005304882198901239576116495)
             + 0.02880424702602099942816415989455) - 0.093809679162435793964291974589287)
             - 0.0085873237274430008064696195901888) - 0.029344851886916701461105461135048)
             - 0.0072274366921431599034009174431503) + 0.05773214768054780315909013665987)
             - 0.043216034954685803026741552912426) +
             y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
             (0.0035766602595110300218117505011151.*x2 - 0.0060412017864735802208375758937109)
             - 0.021584180633963900158844850807327) + 0.034643321554980899268372240840108)
             + 0.037138567451163097266064738732894) - 0.044696863208089999963679161965047)
             + 0.0099753810512557602313554738771018) - 0.074854606876689405714486724718881)
             - 0.094644611211912296755421891703008) + 0.23230748191189198870176824129885)
             + 0.094768333978594604394274369951745) - 0.19191470859917300617603075352235)
             - 0.035585609133306897455817363606911) +
             y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
             (0.00084697060309847996013160598138825.*x2 - 0.0026320007059685898015422012008457)
             + 0.0072013508689210796454016616507943) - 0.0042180626423531895896612553542582)
             - 0.056073187527737197721755535440025) + 0.070506846210398002594565980416519)
             + 0.1249976354391330035653595587064) - 0.16522615943805099569807737225347)
             - 0.11267718745497500021368608713601) + 0.14728598157614200547804728103074)
             + 0.028452560500273900434553553395745) +
             y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0010864151394385499795058880323495.*x2
             + 0.00039991852222477500874292521970688) - 0.014032388835576300664675919449564)
             + 0.0073549786785354204221576424060913) + 0.042876757496619302689744301915198)
             - 0.030679554871998998555326920723019) - 0.046839754103827097031498283286055)
             + 0.035361656410155602181522027649407) + 0.017342513306582200971472929040829)
             - 0.015606538633083300721127173460445) -
             1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.00094094031813350600262912948323901.*x2
             - 0.00088512337220290502812214405992108) - 0.0092175626522195703432815960809421)
             + 0.009498786129154309157418545339624) + 0.026375040840329100344519019927247)
             - 0.027205339050262001415747548094259) - 0.028120338152188700808764565408637)
             + 0.028330326542148700358358937023695) + 0.010189574114692999742826096110093)
             - 0.010967761390271899349380113619645) + 0.003616012983794550210425722269747)
             - 0.040470337630137596940382849197704) -
             1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
             (0.0032386666943906797927477114740213.*x2 - 0.0050527558364963703549377349588667)
             - 0.010469542485642899243281078724976) + 0.016273675482176098994191448809943)
             - 0.015792738874142498578523330365897) + 0.019846587068858900088086372193175)
             + 0.090852284055483997771140991517314) - 0.11785801095474300603793693653643)
             - 0.10276695796280199690642120913253) + 0.12826619535132199878546543914126)
             + 0.028268390637130200171434069034149) - 0.036817044774666997375422994309702)
             + 0.0028239816040532901737780679951584) + 0.082496575181314105162933003612125)
             - 1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
             (0.001794758022732010098107546802737.*x2 - 0.0051775545533456297439545146232831)
             - 0.0145379218778659002886399775889) + 0.039848468281055399176082687517919)
             + 0.041651094669994698227455387495866) - 0.10529675659250499475394491355473)
             - 0.045175928825986200187969643593533) + 0.094437721088724294049576712950511)
             + 0.0007607961729420890332337146233499) + 0.031185927459760200836091925680194)
             + 0.023097251403410300890639561544049) - 0.083497623942092105697732051794446)
             - 0.0052991733884140100607762491335961) + 0.051498619802801598455133103016124)
             + 0.10970988605360799950094730093042) + 0.9007662493033889994364926678827));

           else //Tra1
            x3 :=(p - 4.046574025405169e+06)/1.402633726495369e+05;
            y3 :=(T - 3.661336837494544e+02)/1.732142136607601;

            d := 3.151848490617844e+02 + 13.306001092621717 *
            (0.12781513813756201214388852349657 -
            1.0.*y3.*(y3.*(x3.*(x3.*(x3.*(27.593537297201901736798390629701.*x3 -
            3.3519772907204101741740487341303) - 5.5131777119991998148407219559886)
            - 0.97539190092845196033977117622271) +
            y3.*(y3.*(y3.*(3.5425989935909001360414549708366.*y3 -
            17.868758125231799738230620278046.*x3 + 0.10430045388723499510952308355627)
            + x3.*(37.78244153485439937867340631783.*x3 - 1.0555279754555699778251209863811)
            - 1.2793485905216699372033417603234) -
            1.0.*x3.*(x3.*(42.894911275543499584728124318644.*x3 -
            2.8438223419947701309240528644295) - 4.3210761848767100801183005387429)
            + 0.47460842284604398688685478191474) + 0.81454138283019994482003767188871)
            - 1.0.*x3.*(x3.*(x3.*(x3.*(9.5401815292735800966283932211809.*x3 -
            1.8557040294128999136091806576587) - 3.1449476426487201763393386499956)
            - 0.61942120745281803451121049874928) + 1.2518271200143200605481297316146)
            + 1.7220146026338301048497214651434) -
            1.0.*x3.*(x3.*(x3.*(x3.*(x3.*(1.3853909747584400857789432848222.*x3 -
            0.3972657092673109735514458407124) - 0.67563708812251499491452477741404)
            - 0.11357816200069699441588255695024) + 0.4723722930086720062092808802845)
            - 1.0293529403313199654945719885291));

           end if;
         elseif p < sat.psat then //SH or Tra2
           if p < fitSCrSH then //SH

           x1 :=(p - 2.980358857267919e+06)/2.003389387197036e+06;
           y1 :=(T - 4.054229562317557e+02)/45.958409114606440;

           d := 56.635211776407670 + 51.170196305935875 *
           (x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
           (0.011919623925975399506005381056184.*x1 - 0.016816560599086500388255061011478)
           - 0.07543923526631310383372408523428) + 0.076632784026946995648010840795905)
           + 0.1760739134081940049370018641639) - 0.077544625638353903429589308871073)
           - 0.090293980495413803111226513919974) + 0.21328829121014900027653027336783)
           + 0.85895297834434802819458809608477) -
           1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.012879324334213800018478224274077.*x1
           + 0.022779697731843000924056852340982) - 0.17512872865231199348556856421055)
           - 0.15053239066762599818183332445187) + 0.57917641678307096864131153779454)
           + 0.46957280700831199871103649456927) - 0.35838786101812197815164040548552)
           - 0.06079746500645689943898020146662) + 0.41623962468900699285256905568531)
           - 1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.03773789002180810009390299342158.*x1
           - 0.077145880454219897814915896105958) - 0.4509863927636360014794547623751)
           + 0.22920671119316399222398672463896) + 1.4523996944188799496089359308826)
           + 0.55547982548661400947764832380926) - 0.53432536208958003598468167183455)
           - 0.081640581919811702760192417827056) -
           1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0084090709705604005375079168516095.*x1
           - 0.32466902225279198335172736733512) - 0.53038294176720002237601647721021)
           + 1.0694028400878399231999082985567) + 2.0797721641243498424955760128796)
           + 0.38718966280930999790399482662906) - 0.4452732888600430261050178160076)
           + y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.099897184029952096340210232483514.*x1 +
           0.59860107118300598383342503439053) + 0.3507166512461529772615165256866)
           - 1.4655366225692401105362705493462) - 1.7297359925955699821997768594883)
           - 0.2600455735307929949762240084965) +
           y1.*(y1.*(x1.*(x1.*(x1.*(0.2443676879831049864044700825616.*x1 +
           0.6880164705909640465719689927937) + 0.38126112558704500221651301217207)
           - 0.23723182745500701051888370329834) +
           y1.*(y1.*(x1.*(0.057461822075289298306088880963216.*x1 +
           0.10233644571842000214889623066483) -
           1.0.*y1.*(0.0069500300445884703390286851742985.*x1 -
           0.00018435603001877299807545473875336.*y1 + 0.0077030222964082298992005704008079)
           + 0.038086755027373499216114538512556) -
           1.0.*x1.*(x1.*(0.17271422877019299013667819053808.*x1 +
           0.38727089420489202442610121579492) + 0.20571295331240099790726105766225)
           + 0.0034502714612830698813483731868246) - 0.15142684892312499589372976060986) -
           1.0.*x1.*(x1.*(x1.*(x1.*(0.20396211570385200384514234883682.*x1 +
           0.76365527515374997946651092206594) + 0.34573816250793598658930250167032)
           - 0.96361537425684395952174554622616) - 0.80751514341452801382104098593118)
           + 0.086954809094423601845136317933793) + 0.12572175574167598899322229044628)
           - 0.058010861375621003421798604904325) + 0.11845249608356600568015437602298)
           + 0.24679776490568000602010556576715) - 0.15540540706114100433232749765011);

           else //Tra2
            x4 :=(p - 4.070794245049505e+06)/1.262754225385592e+05;
            y4 :=(T - 3.683481745049519e+02)/2.044093791238606;

            d := 1.362233447731684e+02 + 10.666495162261237 *
            (x4.*(x4.*(x4.*(x4.*(x4.*(x4.*(x4.*
            (3.6167955198518502157867260393687.*x4 + 4.1848670140298800390610267641023)
            + 2.9287312128613498529716707707848) + 3.1727764791332497829046133119846)
            + 1.7568433421937599270279406482587) + 1.2464533942719799863851903864997)
            + 1.4993731616570999953808041027514) + 2.6557647375711002091236423439113)
            - 1.0.*y4.*(x4.*(x4.*(x4.*(x4.*(x4.*(x4.*(18.729457126631899654967128299177.*x4
            + 23.924591799447100015640899073333) + 17.555825752105498338551115011796)
            + 17.523334646701901107235244126059) + 7.4684537830190098617322291829623)
            + 3.5717700040653901361054067820078) + 2.786823939856740039999749569688)
            - 1.0.*y4.*(x4.*(x4.*(x4.*(x4.*(x4.*(36.188751381087797653890447691083.*x4 +
            49.490368171150002751801366684958) + 41.03812091532339678678908967413)
            + 38.670355216406697707043349510059) + 11.91851775111319966526934877038)
            + 3.3336816622821299205270406673662) -
            1.0.*y4.*(y4.*(y4.*(y4.*(x4.*(14.366376134467000014183213352226.*x4
            + 30.910304035304598357924987794831) -
            1.0.*y4.*(2.9633742990843301434722434350988.*x4 + 6.6503720568734996376747403701302)
            + 0.27081347534274097244022527775087) -
            1.0.*x4.*(x4.*(23.615192793133299886676468304358.*x4 +
            50.011080400141999291463434929028) - 5.0758674771474501241641519300174)
            + 5.0393537374750900781350537727121) +
            x4.*(x4.*(x4.*(6.4047015544887395677164931839798.*x4 +
            19.698899893404998806545336265117) - 25.671209219019498704028592328541)
            - 23.220156333251100733150451560505) - 2.2774723427593102087485021911561) +
            x4.*(x4.*(x4.*(x4.*(26.883572274342501629007529118098.*x4 +
            35.802825940432903450982848880813) + 46.735409903557901145632058614865)
            + 42.500656823413798690580733818933) + 8.4849922238045305533660211949609)
            + 1.015658527147800027634616526484) + 1.2560044404598100786785153104574)
            + 2.0008442393816499027536792709725) - 0.083448700555408594770057106870809);

           end if;
         end if;

       elseif p > fitSCrSC then //SC
         x2 := (p - 4.066785093386197e+06)/1.790595204246330e+06;
         y2 := (T - 2.927309039344773e+02)/36.935791732092900;

         d := 5.021637908690308e+02 + 57.120656672831736*
         (0.12262862182525699483726100424974 -
         1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
         (0.000091907229466726205217505518696441.*x2 + 0.00076466359628431300292372707616551)
         - 0.00084794097380833099997232693567639) - 0.0083256240018455794638096989501719)
         + 0.0029471342229610598961730971723227) + 0.035771489849177502684529628140808)
         - 0.004494688782804259936931590146969) - 0.07616668487020640532225712604486)
         + 0.0018972973411420699339779982750542) + 0.081617794317479397392389728338458)
         + 0.0026720114861563900622576372967387) - 0.037308708605431999127954867390144)
         - 0.0040042546391540999317637528065461) + 0.001368396182465019894972102498798)
         + 0.0057290497777046202679263053880732) - 0.073163051957221905685635476856987)
         - 1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
         (0.000181915684599462997711460943151.*x2 - 0.0031056708591826599590024482466788)
         - 0.0025538654810376500321755788291966) + 0.028673854895624299038425775165706)
         + 0.012334278262432099224077397536803) - 0.10032440456470299861013728559556)
         - 0.027481766236180898976826370017079) + 0.15929005304882198901239576116495)
         + 0.02880424702602099942816415989455) - 0.093809679162435793964291974589287)
         - 0.0085873237274430008064696195901888) - 0.029344851886916701461105461135048)
         - 0.0072274366921431599034009174431503) + 0.05773214768054780315909013665987)
         - 0.043216034954685803026741552912426) +
         y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
         (0.0035766602595110300218117505011151.*x2 - 0.0060412017864735802208375758937109)
         - 0.021584180633963900158844850807327) + 0.034643321554980899268372240840108)
         + 0.037138567451163097266064738732894) - 0.044696863208089999963679161965047)
         + 0.0099753810512557602313554738771018) - 0.074854606876689405714486724718881)
         - 0.094644611211912296755421891703008) + 0.23230748191189198870176824129885)
         + 0.094768333978594604394274369951745) - 0.19191470859917300617603075352235)
         - 0.035585609133306897455817363606911) +
         y2.*(y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
         (0.00084697060309847996013160598138825.*x2 - 0.0026320007059685898015422012008457)
         + 0.0072013508689210796454016616507943) - 0.0042180626423531895896612553542582)
         - 0.056073187527737197721755535440025) + 0.070506846210398002594565980416519)
         + 0.1249976354391330035653595587064) - 0.16522615943805099569807737225347)
         - 0.11267718745497500021368608713601) + 0.14728598157614200547804728103074)
         + 0.028452560500273900434553553395745) +
         y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.0010864151394385499795058880323495.*x2
         + 0.00039991852222477500874292521970688) - 0.014032388835576300664675919449564)
         + 0.0073549786785354204221576424060913) + 0.042876757496619302689744301915198)
         - 0.030679554871998998555326920723019) - 0.046839754103827097031498283286055)
         + 0.035361656410155602181522027649407) + 0.017342513306582200971472929040829)
         - 0.015606538633083300721127173460445) -
         1.0.*y2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(0.00094094031813350600262912948323901.*x2
         - 0.00088512337220290502812214405992108) - 0.0092175626522195703432815960809421)
         + 0.009498786129154309157418545339624) + 0.026375040840329100344519019927247)
         - 0.027205339050262001415747548094259) - 0.028120338152188700808764565408637)
         + 0.028330326542148700358358937023695) + 0.010189574114692999742826096110093)
         - 0.010967761390271899349380113619645) + 0.003616012983794550210425722269747)
         - 0.040470337630137596940382849197704) -
         1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
         (0.0032386666943906797927477114740213.*x2 - 0.0050527558364963703549377349588667)
         - 0.010469542485642899243281078724976) + 0.016273675482176098994191448809943)
         - 0.015792738874142498578523330365897) + 0.019846587068858900088086372193175)
         + 0.090852284055483997771140991517314) - 0.11785801095474300603793693653643)
         - 0.10276695796280199690642120913253) + 0.12826619535132199878546543914126)
         + 0.028268390637130200171434069034149) - 0.036817044774666997375422994309702)
         + 0.0028239816040532901737780679951584) + 0.082496575181314105162933003612125)
         - 1.0.*x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*(x2.*
         (0.001794758022732010098107546802737.*x2 - 0.0051775545533456297439545146232831)
         - 0.0145379218778659002886399775889) + 0.039848468281055399176082687517919)
         + 0.041651094669994698227455387495866) - 0.10529675659250499475394491355473)
         - 0.045175928825986200187969643593533) + 0.094437721088724294049576712950511)
         + 0.0007607961729420890332337146233499) + 0.031185927459760200836091925680194)
         + 0.023097251403410300890639561544049) - 0.083497623942092105697732051794446)
         - 0.0052991733884140100607762491335961) + 0.051498619802801598455133103016124)
         + 0.10970988605360799950094730093042) + 0.9007662493033889994364926678827));

       elseif p < fitSCrSH then //SH
         x1 :=(p - 2.980358857267919e+06)/2.003389387197036e+06;
         y1 :=(T - 4.054229562317557e+02)/45.958409114606440;

         d := 56.635211776407670 + 51.170196305935875 *
         (x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*
         (0.011919623925975399506005381056184.*x1 - 0.016816560599086500388255061011478)
         - 0.07543923526631310383372408523428) + 0.076632784026946995648010840795905)
         + 0.1760739134081940049370018641639) - 0.077544625638353903429589308871073)
         - 0.090293980495413803111226513919974) + 0.21328829121014900027653027336783)
         + 0.85895297834434802819458809608477) -
         1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.012879324334213800018478224274077.*x1
         + 0.022779697731843000924056852340982) - 0.17512872865231199348556856421055)
         - 0.15053239066762599818183332445187) + 0.57917641678307096864131153779454)
         + 0.46957280700831199871103649456927) - 0.35838786101812197815164040548552)
         - 0.06079746500645689943898020146662) + 0.41623962468900699285256905568531)
         - 1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.03773789002180810009390299342158.*x1
         - 0.077145880454219897814915896105958) - 0.4509863927636360014794547623751)
         + 0.22920671119316399222398672463896) + 1.4523996944188799496089359308826)
         + 0.55547982548661400947764832380926) - 0.53432536208958003598468167183455)
         - 0.081640581919811702760192417827056) -
         1.0.*y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.0084090709705604005375079168516095.*x1
         - 0.32466902225279198335172736733512) - 0.53038294176720002237601647721021)
         + 1.0694028400878399231999082985567) + 2.0797721641243498424955760128796)
         + 0.38718966280930999790399482662906) - 0.4452732888600430261050178160076)
         + y1.*(x1.*(x1.*(x1.*(x1.*(x1.*(0.099897184029952096340210232483514.*x1 +
         0.59860107118300598383342503439053) + 0.3507166512461529772615165256866)
         - 1.4655366225692401105362705493462) - 1.7297359925955699821997768594883)
         - 0.2600455735307929949762240084965) +
         y1.*(y1.*(x1.*(x1.*(x1.*(0.2443676879831049864044700825616.*x1 +
         0.6880164705909640465719689927937) + 0.38126112558704500221651301217207)
         - 0.23723182745500701051888370329834) +
         y1.*(y1.*(x1.*(0.057461822075289298306088880963216.*x1 +
         0.10233644571842000214889623066483) -
         1.0.*y1.*(0.0069500300445884703390286851742985.*x1 -
         0.00018435603001877299807545473875336.*y1 + 0.0077030222964082298992005704008079)
         + 0.038086755027373499216114538512556) -
         1.0.*x1.*(x1.*(0.17271422877019299013667819053808.*x1 +
         0.38727089420489202442610121579492) + 0.20571295331240099790726105766225)
         + 0.0034502714612830698813483731868246) - 0.15142684892312499589372976060986) -
         1.0.*x1.*(x1.*(x1.*(x1.*(0.20396211570385200384514234883682.*x1 +
         0.76365527515374997946651092206594) + 0.34573816250793598658930250167032)
         - 0.96361537425684395952174554622616) - 0.80751514341452801382104098593118)
         + 0.086954809094423601845136317933793) + 0.12572175574167598899322229044628)
         - 0.058010861375621003421798604904325) + 0.11845249608356600568015437602298)
         + 0.24679776490568000602010556576715) - 0.15540540706114100433232749765011);

       else //SCr
         x5 :=(p - 5.802288615661496e+06)/7.338554467075353e+05;
         y5 :=(T - 3.760304613091765e+02)/5.498810315188556;

         d := 3.154990120758517e+02 + 49.733110939377710 *
         (0.29986919733757100292592667756253 -
         1.0.*y5.*(y5.*(x5.*(x5.*(x5.*(x5.*(x5.*(x5.*(0.052121691943522001355670880684556.*x5
         - 0.1840266908445299942620465571963) + 0.082515535861470798439931684242765)
         + 0.36379370988798298558464239249588) - 0.46764737838516801105015474604443)
         + 0.12007589720658999599134375557696) - 0.0071211086602493397015867238053488) +
         y5.*(y5.*(y5.*(y5.*(y5.*(y5.*(0.00065746473304540602525247727783153.*x5 +
         0.00021525368295793000355392576850022.*y5 - 0.00086002064112422399108637272036049)
         + x5.*(0.0013974995915379500970032733420112.*x5 -
         0.0025079843052703298424133127042523) - 0.00090474924209333999758353428433111)
         - 1.0.*x5.*(x5.*(0.001421065385069200052298166170317.*x5 +
         0.0023917407256003999152516037440819) - 0.0037814595972134198119396497617117)
         + 0.002255514572919890044916391147467) -
         1.0.*x5.*(x5.*(x5.*(0.010233649959025500550402476562795.*x5 -
         0.034514144414571901187116509390762) + 0.041971005283322503076615106465397)
         - 0.021194032357404100908038202533135) + 0.0018712535031516199998669058857104)
         + x5.*(x5.*(x5.*(x5.*(0.032898690001765103219089070307746.*x5 -
         0.11615530721577900508112435318253) + 0.12039911079716099362446612985877)
         + 0.0053004037071378296008816732864943) - 0.054052015743757897414667468183325)
         + 0.0076802596764220304112469328572388) -
         1.0.*x5.*(x5.*(x5.*(x5.*(x5.*(0.066101135051723394764344732266181.*x5 -
         0.20793987315149300987293656817201) + 0.11214375306263099640879943308391)
         + 0.19464443215444199308805650616705) - 0.22034909344931599695094348589919)
         + 0.071946671401736897455414521118655) + 0.01362198118330120062691168669744)
         + 0.079479379553719003981271384873253) +
         x5.*(x5.*(x5.*(x5.*(x5.*(x5.*(0.086308496594177594452013124737277.*x5
         - 0.11330597341815300260758903050373) - 0.32012310443657099323644388277899)
         + 0.51195562617676504402197679155506) - 0.010365372109673500616855434941499)
         - 0.083395020801650204811394928583468) - 0.22876235577089298889319479712867)
         + 0.58554091337392399907457729568705) -
         1.0.*x5.*(x5.*(x5.*(x5.*(x5.*(x5.*(0.010669651871003500709367273202588.*x5
         + 0.01729839839995769845693018851307) - 0.12762652341174698933379261234222)
         + 0.10061457957755000347521701087317) + 0.036937472117247398262218638365084)
         + 0.077930091868110104580402719420817) - 0.49354441399947102109280194781604));

       end if;

    annotation(derivative(noDerivative=phase)=density_pT_der,
          inverse(p=pressure_dT(d=d,T=T,phase=phase)),
          Inline=false,
          LateInline=true);
  end density_pT;

  redeclare function extends dynamicViscosity
    "Calculates dynamic viscosity of refrigerant"

  protected
    Real tv[:] = {0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0,
                  2.0, 3.0, 4.0, 1.0, 2.0};
    Real dv[:] = {1.0, 2.0, 3.0, 13.0, 12.0, 16.0, 0.0, 18.0,
                  20.0, 13.0, 4.0, 0.0, 1.0};
    Real nv[:] = {-0.7548580e-1, 0.7607150, -0.1665680, 0.1627612e-5,
                  0.1443764e-4, -0.2759086e-6, -0.1032756, -0.2498159e-7,
                  0.4069891e-8, -0.1513434e-5, 0.2591327e-2, 0.5650076,
                  0.1207253};

    Real d_crit = MM/fluidConstants[1].criticalMolarVolume;
    Real MM = fluidConstants[1].molarMass;

    ThermodynamicState dewState = setDewState(setSat_T(state.T));
    ThermodynamicState bubbleState = setBubbleState(setSat_T(state.T));
    Real dr;
    Real drL;
    Real drG;
    Real etaL;
    Real etaG;
    Real Hc = 17.1045;
    Real Tr = state.T/fluidConstants[1].criticalTemperature;

    SaturationProperties sat = setSat_T(state.T);
    Real phase_dT = if not ((state.d < bubbleDensity(sat) and state.d >
      dewDensity(sat)) and state.T < fluidConstants[1].criticalTemperature)
      then 1 else 2;
    Real quality;

  algorithm
    if state.phase==1 or phase_dT==1 then
      eta := 0;
      dr := state.d/d_crit;
      for i in 1:11 loop
          eta := eta + nv[i]*Tr^tv[i]*dr^dv[i];
      end for;
      for i in 12:13 loop
          eta := eta + exp(-dr*dr/2)*nv[i]*Tr^tv[i]*dr^dv[i];
      end for;
      eta := (exp(eta) - 1)*Hc/1e6;
    elseif state.phase==2 or phase_dT==2 then
      etaL := 0;
      etaG := 0;
      drG := dewState.d/d_crit;
      drL := bubbleState.d/d_crit;
      quality :=if state.phase == 2 then (bubbleState.d/state.d - 1)/(
      bubbleState.d/dewState.d - 1) else 1;
      for i in 1:11 loop
          etaL := etaL + nv[i]*Tr^tv[i]*drL^dv[i];
          etaG := etaG + nv[i]*Tr^tv[i]*drG^dv[i];
      end for;
      for i in 12:13 loop
          etaL := etaL + exp(-drL*drL/2)*nv[i]*Tr^tv[i]*drL^dv[i];
          etaG := etaG + exp(-drG*drG/2)*nv[i]*Tr^tv[i]*drG^dv[i];
      end for;
      etaL := (exp(etaL) - 1)*Hc/1e6;
      etaG := (exp(etaG) - 1)*Hc/1e6;
      eta := (quality/etaG + (1 - quality)/etaL)^(-1);
    end if;
  end dynamicViscosity;

  redeclare function extends thermalConductivity
    "Calculates thermal conductivity of refrigerant"

  protected
    Real B1[:] = {-3.51153e-2,1.70890e-1,-1.47688e-1,5.19283e-2,-6.18662e-3};
    Real B2[:] = {4.69195e-2,-1.48616e-1,1.32457e-1,-4.85636e-2,6.60414e-3};
    Real C[:] = {3.66486e-4,-2.21696e-3,2.64213e+0};
    Real A[:] = {-1.24778e-3,8.16371e-3,1.99374e-2};

    Real d_crit = MM/fluidConstants[1].criticalMolarVolume;
    Real MM = fluidConstants[1].molarMass;

    Real delta;
    Real deltaL;
    Real deltaG;
    Real tau = fluidConstants[1].criticalTemperature/state.T;

    Real lambda0 = A[1]+A[2]/tau+A[3]/(tau^2);
    Real lambdar = 0;
    Real lambdarL = 0;
    Real lambdarG = 0;
    Real lambdaL = 0;
    Real lambdaG = 0;

    SaturationProperties sat = setSat_T(state.T);
    Real phase_dT = if not ((state.d < bubbleDensity(sat) and state.d >
      dewDensity(sat)) and state.T < fluidConstants[1].criticalTemperature)
      then 1 else 2;
    Real quality;

  algorithm
    delta :=state.d/d_crit;
    if state.phase==1 or phase_dT==1 then
      for i in 1:5 loop
          lambdar := lambdar + (B1[i] + B2[i]/tau)*delta^i;
      end for;
      lambda := (lambda0 + lambdar + (C[1]/(C[2] + abs(1.0/tau - 1.0))*
        exp(-(C[3]*(delta - 1.0))^2)));
    elseif state.phase==2 or phase_dT==2 then
      deltaL :=bubbleDensity(setSat_T(state.T))/d_crit;
      deltaG :=dewDensity(setSat_T(state.T))/d_crit;
      quality :=if state.phase == 2 then (bubbleDensity(setSat_T(state.T))/
        state.d - 1)/(bubbleDensity(setSat_T(state.T))/dewDensity(setSat_T(
        state.T)) - 1) else 1;
      for i in 1:5 loop
          lambdarL := lambdarL + (B1[i] + B2[i]/tau)*deltaL^i;
          lambdarG := lambdarG + (B1[i] + B2[i]/tau)*deltaG^i;
      end for;
      lambdaL := (lambda0 + lambdarL + (C[1]/(C[2] + abs(1.0/tau - 1.0))*
        exp(-(C[3]*(deltaL - 1.0))^2)));
      lambdaG := (lambda0 + lambdarG + (C[1]/(C[2] + abs(1.0/tau - 1.0))*
        exp(-(C[3]*(deltaG - 1.0))^2)));
      lambda := (quality/lambdaG + (1 - quality)/lambdaL)^(-1);
    end if;
  end thermalConductivity;

  redeclare function extends surfaceTension
    "Surface tension in two phase region of refrigerant"

  algorithm
    //sigma := 1e-3*55.817*(1-sat.Tsat/369.85)^1.266; //stimmt die überhaupt?? (unten neu eingefügt)
    sigma := 0.05334 * (1-sat.Tsat/369.89)^(1.235) + (-0.01748) * (1-sat.Tsat/369.89)^(4.404);
  end surfaceTension;
  annotation (Documentation(revisions="<html>
<ul>
<li>October, 2019, by :<br>First implementation (see <a href=\"https://github.com/RWTH-EBC/AixLib/issues/408\">issue 408</a>). </li>
</ul>
</html>", info="<html>
<p>This package provides a refrigerant model for R290 using a hybrid approach developed by Sangi et al.. The hybrid approach is implemented in <a href=\"modelica://AixLib.Media.Refrigerants.Interfaces.PartialHybridTwoPhaseMediumRecord\">AixLib.Media.Refrigerants.Interfaces.PartialHybridTwoPhaseMediumRecord </a>and the refrigerant model is implemented by complete the template <a href=\"modelica://AixLib.Media.Refrigerants.Interfaces.TemplateHybridTwoPhaseMediumRecord\">AixLib.Media.Refrigerants.Interfaces.TemplateHybridTwoPhaseMediumRecord </a>. </p>
<h4>Assumptions and limitations</h4>
<p><br>The implemented coefficients are fitted to external data by Sangi et al. and are valid within the following range:</p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\" width=\"30%\"><tr>
<td><p>Parameter</p></td>
<td><p>Minimum Value</p></td>
<td><p>Maximum Value</p></td>
</tr>
<tr>
<td><p>Pressure (p) in bar</p></td>
<td><p>1.0</p></td>
<td><p>70</p></td>
</tr>
<tr>
<td><p>Temperature (T) in K</p></td>
<td><p>233.15</p></td>
<td><p>473.15</p></td>
</tr>
</table>
<p><br><h4>Validation</h4></p>
<p>Sangi et al. validated their model by comparing it to results obtained from the Helmholtz equation of state. They found out that relative error of the refrigerant model compared to HelmholtzMedia (Thorade and Saadat, 2012) is close to zero. </p>
<h4>References</h4>
<p>Thorade, Matthis; Saadat, Ali (2012): <a href=\"http://www.ep.liu.se/ecp/076/006/ecp12076006.pdf\">HelmholtzMedia - A fluid properties library</a>. In: <i>Proceedings of the 9th International Modelica Conference</i>; September 3-5; 2012; Munich; Germany. Link&ouml;ping University Electronic Press, S. 63&ndash;70. </p>
<p>Sangi, Roozbeh; Jahangiri, Pooyan; Klasing, Freerk; Streblow, Rita; M&uuml;ller, Dirk (2014): <a href=\"http://dx.doi.org/10.3384/ecp14096\">A Medium Model for the Refrigerant Propane for Fast and Accurate Dynamic Simulations</a>. In: <i>The 10th International Modelica Conference</i>. Lund, Sweden, March 10-12, 2014: Link&ouml;ping University Electronic Press (Link&ouml;ping Electronic Conference Proceedings), S. 1271&ndash;1275 </p>
<p>Klasing,Freerk: A New Design for Direct Exchange Geothermal Heat Pumps - Modeling, Simulation and Exergy Analysis. <i>Master thesis</i> </p>
<p>Scalabrin, G.; Marchi, P.; Span, R. (2006): A Reference Multiparameter Viscosity Equation for Propane with an Optimized Functional Form. In: <i>J. Phys. Chem. Ref. Data, Vol. 35, No. 3</i>, S. 1415-1442 </p>
</html>"));
end R290_new_IIR_P05_30_T263_343_Horner;
